name: LANCommander Release

on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    runs-on: windows-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - uses: frabert/replace-string-action@v2
      name: Trim Tag Ref
      id: trim_tag_ref
      with:
        string: '${{ github.ref }}'
        pattern: 'refs/tags/v'
        replace-with: ''

    # Server
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Setup Node.js environment
      uses: actions/setup-node@v3.8.1
    - run: cd LANCommander/wwwroot/scripts; npm install

    # Windows
    - name: Publish Windows
      run: dotnet publish "./LANCommander/LANCommander.csproj" -c Release -o _Build_Windows --self-contained --os win -p:PublishSingleFile=true -p:Version="${{ steps.trim_tag_ref.outputs.replaced }}" -p:AssemblyVersion="${{ steps.trim_tag_ref.outputs.replaced }}"
    - name: Publish Windows Updater
      run: dotnet publish "./LANCommander.AutoUpdater/LANCommander.AutoUpdater.csproj" -c Release -o _Build_Windows --self-contained --os win -p:Version="${{ steps.trim_tag_ref.outputs.replaced }}" -p:AssemblyVersion="${{ steps.trim_tag_ref.outputs.replaced }}"
    - name: Rename Windows Updater
      run: mv ./_Build_Windows/LANCommander.AutoUpdater.exe ./_Build_Windows/LANCommander.AutoUpdater.exe.Update
    - name: Remove Windows Extra Files
      run: rm -Recurse -Force ./_Build_Windows/wwwroot/_content/AntDesign/less

    # Linux
    - name: Publish Linux
      run: dotnet publish "./LANCommander/LANCommander.csproj" -c Release -o _Build_Linux --self-contained --os linux -p:PublishSingleFile=true -p:Version="${{ steps.trim_tag_ref.outputs.replaced }}" -p:AssemblyVersion="${{ steps.trim_tag_ref.outputs.replaced }}"
    - name: Remove Linux Extra Files
      run: rm -Recurse -Force ./_Build_Linux/wwwroot/_content/AntDesign/less

    # Sign Windows Binary
    - name: Sign Windows Binary
      uses: nadeemjazmawe/Sign-action-signtool.exe@v0.1
      with:
        certificate: "${{ secrets.CERTIFICATE }}"
        cert-password: "${{ secrets.CERTIFICATE_PASSWORD }}"
        filepath: "./_Build_Windows/LANCommander.exe"
    - name: Upload Artifacts (Windows)
      uses: actions/upload-artifact@v2
      with:
        name: LANCommander-Windows-x64-v${{ steps.trim_tag_ref.outputs.replaced }}
        path: "./_Build_Windows"
    - name: Upload Artifacts (Linux)
      uses: actions/upload-artifact@v2
      with:
        name: LANCommander-Linux-x64-v${{ steps.trim_tag_ref.outputs.replaced }}
        path: "./_Build_Linux"

    # Client
    - uses: actions/checkout@v3
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.1.1
    - name: Restore NuGet packages
      run: nuget restore LANCommander.sln
    - name: Update Version
      shell: pwsh
      run: (Get-Content .\LANCommander.Playnite.Extension\Properties\AssemblyInfo.cs).Replace('1.0.0.0', '${{ steps.trim_tag_ref.outputs.replaced }}') | Set-Content .\LANCommander.Playnite.Extension\Properties\AssemblyInfo.cs
    - name: Build and Publish Library
      run: msbuild LANCommander.Playnite.Extension/LANCommander.PlaynitePlugin.csproj /p:Configuration=Release /p:OutputPath=Build /p:Version="${{ steps.trim_tag_ref.outputs.replaced }}" /p:AssemblyVersion="${{ steps.trim_tag_ref.outputs.replaced }}"
    - name: Sign Windows Binary
      uses: nadeemjazmawe/Sign-action-signtool.exe@v0.1
      with:
        certificate: "${{ secrets.CERTIFICATE }}"
        cert-password: "${{ secrets.CERTIFICATE_PASSWORD }}"
        filepath: "./LANCommander.Playnite.Extension/Build/LANCommander.PlaynitePlugin.dll"
    - name: Download Playnite Release
      uses: robinraju/release-downloader@v1.7
      with:
        repository: JosefNemec/Playnite
        tag: 10.32
        fileName: Playnite1032.zip
    - name: Extract Playnite
      run: Expand-Archive -Path Playnite1032.zip -DestinationPath Playnite
    - name: Update Manifest Versioning
      uses: fjogeleit/yaml-update-action@main
      with:
        valueFile: "LANCommander.Playnite.Extension/Build/extension.yaml"
        propertyPath: "Version"
        value: "${{ steps.trim_tag_ref.outputs.replaced }}"
        commitChange: false
    - name: Run Playnite Toolbox
      run: Playnite/Toolbox.exe pack LANCommander.Playnite.Extension/Build .
    - name: Upload Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: LANCommander.PlaynitePlugin-v${{ steps.trim_tag_ref.outputs.replaced }}
        path: LANCommander.PlaynitePlugin_48e1bac7-e0a0-45d7-ba83-36f5e9e959fc_*.pext

      # Create a draft release
    - name: Create Draft Release
      run: gh release create ${{ steps.trim_tag_ref.outputs.replaced }} -t "v${{ steps.trim_tag_ref.outputs.replaced }}" -n "v${{ steps.trim_tag_ref.outputs.replaced }}" --notes "Auto-generated release notes based on commits."

      # Create a ZIP archive of Windows artifacts
    - name: Create Windows ZIP Archive
      run: Compress-Archive -Path ${{ github.workspace }}/_Build_Windows/* -DestinationPath ${{ github.workspace }}/LANCommander-Linux-x64-v${{ steps.trim_tag_ref.outputs.replaced }}.zip

      # Upload Windows ZIP archive to the draft release
    - name: Upload Windows ZIP Archive to Draft Release
      run: gh release upload ${{ steps.trim_tag_ref.outputs.replaced }} --clobber ${{ github.workspace }}/LANCommander-Windows-x64-v${{ steps.trim_tag_ref.outputs.replaced }}.zip

      # Create a ZIP archive of Linux artifacts
    - name: Create Linux ZIP Archive
      run: Compress-Archive -Path ${{ github.workspace }}/_Build_Linux/* -DestinationPath ${{ github.workspace }}/LANCommander-Linux-x64-v${{ steps.trim_tag_ref.outputs.replaced }}.zip

      # Upload Linux ZIP archive to the draft release
    - name: Upload Linux ZIP Archive to Draft Release
      run: gh release upload ${{ steps.trim_tag_ref.outputs.replaced }} --clobber ${{ github.workspace }}/LANCommander-Windows-x64-v${{ steps.trim_tag_ref.outputs.replaced }}.zip

      # Upload the extracted artifact to the draft release
    - name: Upload Playnite Plugin to Draft Release
      run: gh release upload ${{ steps.trim_tag_ref.outputs.replaced }} --clobber ${{ github.workspace }}/LANCommander.PlaynitePlugin_48e1bac7-e0a0-45d7-ba83-36f5e9e959fc_*.pext

      # Automatically populate the release notes based on commits
    - name: Generate Release Notes
      run: gh release note ${{ steps.trim_tag_ref.outputs.replaced }} --json title -F "$(git log $(git describe --tags --abbrev=0)...HEAD --pretty=format:'%s%n%b')" | jq -r .title > release_notes.txt

      # Update Draft Release with release notes
    - name: Update Draft Release with Release Notes
      run: gh release edit ${{ steps.trim_tag_ref.outputs.replaced }} --notes-file release_notes.txt