@page "/Settings"
@using LANCommander.Launcher.Models
@inject NavigationManager NavigationManager
@inject UpdateService UpdateService
@inject IMessageService MessageService
@inject ILogger<Index> Logger

<div style="flex-grow: 1">
    <PageHeader Title="Settings" OnBack="@(() => { NavigationManager.NavigateTo("/"); })" Style="padding-top: 48px">
        <PageHeaderExtra>
            <Space Direction="@DirectionVHType.Horizontal">
                <SpaceItem>
                    <Button OnClick="CheckForUpdates">Check for Updates</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button OnClick="Save" Type="@ButtonType.Primary">Save</Button>
                </SpaceItem>
            </Space>
        </PageHeaderExtra>
    </PageHeader>

    <Form Model="Settings" Layout="@FormLayout.Vertical" Style="padding: 0 24px">
        <Divider Orientation="left" Plain>Games</Divider>
        <FormItem Label="Storage Path">
            <Input @bind-Value="@context.Games.DefaultInstallDirectory" />
        </FormItem>

        <Divider Orientation="left" Plain>Media</Divider>
        <FormItem Label="Storage Path">
            <Input @bind-Value="@context.Media.StoragePath" />
        </FormItem>

        <Divider Orientation="left" Plain>Debug</Divider>
        <FormItem Label="Enable Script Debugging">
            <Switch @bind-Checked="@context.Debug.EnableScriptDebugging" />
        </FormItem>
        <FormItem Label="Logging Path">
            <Input @bind-Value="@context.Debug.LoggingPath" />
        </FormItem>
        <FormItem Label="Logging Level">
            <Select @bind-Value="@context.Debug.LoggingLevel" TItem="LogLevel" TItemValue="LogLevel" DataSource="Enum.GetValues<LogLevel>()">
                <LabelTemplate Context="Value">@Value.GetDisplayName()</LabelTemplate>
                <ItemTemplate Context="Value">@Value.GetDisplayName()</ItemTemplate>
            </Select>
        </FormItem>
    </Form>
</div>

<footer style="background: none;">LANCommander Launcher v@(UpdateService.GetCurrentVersion().ToString())</footer>


@code {
    Settings Settings;

    protected override async Task OnInitializedAsync()
    {
        Settings = SettingService.GetSettings();
    }

    void Save()
    {
        try
        {
            SettingService.SaveSettings(Settings);

            MessageService.Success("Settings saved!");
        }
        catch (Exception ex)
        {
            MessageService.Error("An unknown error occurred.");
            Logger.LogError(ex, "An unknown error occurred.");
        }
    }

    async Task CheckForUpdates()
    {
        var updateVersion = await UpdateService.CheckForUpdateAsync();

        if (updateVersion == null)
            MessageService.Success("You are on the latest version!");
    }
}
