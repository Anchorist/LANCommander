@page "/Authenticate"
@using BeaconLib
@using LANCommander.Launcher.Models
@inject ProfileService ProfileService
@inject NavigationManager NavigationManager
@inject IMessageService MessageService
@inject ILogger<Index> Logger

<Layout Style="background-image: url('/assets/auth-background.jpg'); background-size: cover;">
    <Content Class="authentication-form">
        <div class="authentication-logo">
            <img src="/assets/logo.svg" />
        </div>

        <GridRow Class="authentication-box">
            @if (DiscoveredServers.Any())
            {
                <GridCol Flex="1" Class="discovered-servers-pane">
                    <AntList DataSource="DiscoveredServers">
                        <Header>Discovered Servers</Header>
                        <ChildContent>
                            <ListItem OnClick="() => SelectServer(context)">
                                <ListItemMeta Title="@context.Name" Description="@context.Address.ToString()">

                                </ListItemMeta>
                            </ListItem>
                        </ChildContent>
                    </AntList>
                </GridCol>
            }

            <GridCol Flex="2" Class="login-form-pane">
                <Form Model="@Model" Loading="@Loading" Layout="@FormLayout.Vertical" OnFinish="OnFinish">
                    <FormItem Label="Server Address">
                        <Input @bind-Value="@context.ServerAddress" />
                    </FormItem>
                    <FormItem Label="Username">
                        <Input @bind-Value="@context.Username" />
                    </FormItem>
                    <FormItem Label="Password">
                        <InputPassword @bind-Value="@context.Password" />
                    </FormItem>
                    <FormItem>
                        <Button Type="@ButtonType.Primary" HtmlType="submit">
                            Login
                        </Button>

                        @if (Settings.Profile.Id != Guid.Empty && !String.IsNullOrWhiteSpace(Settings.Profile.Alias))
                        {
                            <Button OnClick="OfflineMode">
                                Offline
                            </Button>
                        }

                        <Button Type="@ButtonType.Text" OnClick="@(() => NavigationManager.NavigateTo("/Authenticate/Register"))">
                            Register
                        </Button>
                    </FormItem>
                </Form>
            </GridCol>
        </GridRow>
    </Content>
</Layout>

@code {
    public class AuthenticationRequest
    {
        public string ServerAddress { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }

    AuthenticationRequest Model = new AuthenticationRequest();
    bool Loading { get; set; } = false;
    List<DiscoveredServer> DiscoveredServers = new List<DiscoveredServer>();

    Models.Settings Settings = SettingService.GetSettings();
    bool BeaconActive = true;
    Probe Probe = new Probe("LANCommander");

    protected override async Task OnInitializedAsync()
    {
        Probe.BeaconsUpdated += (beacons) =>
        {
            foreach (var beacon in beacons)
            {
                if (!String.IsNullOrWhiteSpace(beacon.Data))
                {
                    var server = new DiscoveredServer(beacon.Data, beacon.Address);

                    if (!DiscoveredServers.Any(s => s.Address.ToString() == server.Address.ToString()))
                        DiscoveredServers.Add(server);
                }
                    
            }
        };

        ActivateBeacon();
    }

    async Task ActivateBeacon()
    {
        BeaconActive = true;

        Probe.Start();

        await Task.Delay(10000);

        Probe.Stop();

        BeaconActive = false;

        await InvokeAsync(StateHasChanged);
    }

    async Task SelectServer(DiscoveredServer server)
    {
        Model.ServerAddress = server.Address.ToString();
    }

    async Task OnFinish(EditContext editContext)
    {
        Loading = true;

        try
        {
            await ProfileService.Login(Model.ServerAddress, Model.Username, Model.Password);

            MainLayout.Import();

            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            MessageService.Error(ex.Message, 5);
            Logger.LogError(ex, ex.Message);
            Loading = false;
        }
    }

    async Task OfflineMode()
    {
        Settings.Authentication.OfflineMode = true;
        SettingService.SaveSettings(Settings);

        NavigationManager.NavigateTo("/");
    }
}
