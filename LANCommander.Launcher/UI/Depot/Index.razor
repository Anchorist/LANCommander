@page "/Depot"
@page "/Depot/{id:guid}"
@using LANCommander.Launcher.Data.Models
@using LANCommander.Launcher.Models.Enums
@using LANCommander.Launcher.Models
@using System.Diagnostics
@using LANCommander.Launcher.UI.Depot.Components
@using LANCommander.SDK.Helpers
@inject SDK.Client Client
@inject NavigationManager NavigationManager
@inject DepotService DepotService
@inject InstallService InstallService
@inject GameService GameService
@inject ModalService ModalService
@inject ConfirmService ConfirmService
@inject ImportService ImportService

<Layout>
    <Content Class="depot">
        <DepotFilter Items="@ListItems" />

        <DepotList Items="@ListItems" OnItemSelected="@((item) => NavigationManager.NavigateTo($"/Depot/{item.Key}"))" />
    </Content>
</Layout>

<div class="logo">
    <img src="assets/logo-cut.svg" />
</div>

<DepotGameDetails @ref="DepotGameDetails" ItemId="@(SelectedItem?.Key ?? Guid.Empty)" OnClose="@(() => NavigationManager.NavigateTo("/Depot"))" />

<LANCommander.Launcher.UI.Components.Footer />

@code {
    [Parameter] public Guid Id { get; set; }

    DepotGameDetails DepotGameDetails;

    List<string> Groups = new();
    IEnumerable<Models.ListItem> ListItems = new List<Models.ListItem>();

    Models.ListItem SelectedItem { get; set; }

    Settings Settings = SettingService.GetSettings();

    protected override async Task OnInitializedAsync()
    {
        DepotService.OnItemsFiltered += LoadFilteredItems;

        await DepotService.RefreshItemsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        SelectedItem = DepotService.Items.FirstOrDefault(i => i.Key == Id);

        if (SelectedItem != null && Id != Guid.Empty)
        {
            await DepotGameDetails.Show();
        }
    }

    async Task LoadFilteredItems(IEnumerable<Models.ListItem> listItems)
    {
        ListItems = listItems;

        await UpdateGroups();
        await InvokeAsync(StateHasChanged);
    }

    async Task UpdateGroups()
    {
        Groups = ListItems.SelectMany(i => i.Groups).Distinct().ToList();

        if (ListItems.Any(i => i.Groups == null || i.Groups.Length == 0))
            Groups.Add("Uncategorized");

        await InvokeAsync(StateHasChanged);
    }
}
