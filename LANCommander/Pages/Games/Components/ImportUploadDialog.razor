@using System.Net;
@using System.Diagnostics;
@using Hangfire;
@using LANCommander.Jobs.Background;
@using Microsoft.EntityFrameworkCore;
@inject HttpClient HttpClient
@inject NavigationManager Navigator
@inject GameService GameService
@inject IMessageService MessageService
@inject IJSRuntime JS

@{
    RenderFragment Footer =
    @<Template>
        <Button OnClick="UploadImportJS" Disabled="@(File == null || Uploading)" Type="@ButtonType.Primary">Upload</Button>
        <Button OnClick="Clear" Disabled="File == null || Uploading" Danger>Clear</Button>
        <Button OnClick="Cancel">Cancel</Button>
    </Template>;
}

<Modal Visible="@Visible" Title="Import Game" OnOk="UploadImportJS" OnCancel="Cancel" Footer="@Footer">
    <Space Direction="DirectionVHType.Horizontal">
        <SpaceItem>
            <InputFile @ref="FileInput" id="FileInput" OnChange="FileSelected" hidden />
            <Upload Name="files" FileList="FileList">
                <label class="ant-btn" for="FileInput">
                    <Icon Type="upload" />
                    @if (File == null)
                    {
                        <Text>Select File</Text>
                    }
                    else
                    {
                        <Text>Change File</Text>
                    }
                </label>
            </Upload>
        </SpaceItem>
        <SpaceItem>
            @if (File != null)
            {
                <Text>@File.Name (@ByteSizeLib.ByteSize.FromBytes(File.Size))</Text>
            }
        </SpaceItem>
    </Space>

    <Progress Percent="Progress" Status="@CurrentProgressStatus" Class="uploader-progress" />
    <Text Class="uploader-progress-rate"></Text>
</Modal>

@code {
    [Parameter] public EventCallback<Guid> OnGameImported { get; set; }

    InputFile FileInput;
    IBrowserFile File { get; set; }
    List<UploadFileItem> FileList = new List<UploadFileItem>();

    bool IsValid = false;
    bool Visible = false;

    int Progress = 0;
    bool Uploading = false;
    bool Finished = false;
    double Speed = 0;

    string Filename;

    ProgressStatus CurrentProgressStatus
    {
        get
        {
            if (Finished)
                return ProgressStatus.Success;
            else if (Uploading)
                return ProgressStatus.Active;
            else
                return ProgressStatus.Normal;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        HttpClient.BaseAddress = new Uri(Navigator.BaseUri);
    }

    private void Clear()
    {
        File = null;
    }

    private void Cancel()
    {
        File = null;
        Visible = false;
    }

    private async void FileSelected(InputFileChangeEventArgs args)
    {
        File = args.File;
    }

    public async Task Open()
    {
        Visible = true;

        await InvokeAsync(StateHasChanged);

        var i = 0;

        // Check every 10 seconds to see if the file input is available
        while (i < 20)
        {
            if (FileInput != null)
            {
                await JS.InvokeVoidAsync("Uploader.Init", "FileInput", "");

                break;
            }

            i++;
            await Task.Delay(500);
        }
    }

    private async Task UploadImportJS()
    {
        Uploading = true;

        var dotNetReference = DotNetObjectReference.Create(this);

        await JS.InvokeVoidAsync("Uploader.Upload", dotNetReference);

        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async void OnUploadComplete(string data)
    {
        if (Guid.TryParse(data, out var objectKey))
        {
            try
            {
                Uploading = false;
                Finished = true;

                var game = await GameService.Import(objectKey);

                Visible = false;

                await InvokeAsync(StateHasChanged);

                if (OnGameImported.HasDelegate)
                    await OnGameImported.InvokeAsync(game.Id);

                MessageService.Success($"{game.Title} successfully imported!");
            }
            catch (Exception ex)
            {
                MessageService.Error("An unknown error occurred while trying to import");
            }
        }
        else
        {
            Visible = false;

            await InvokeAsync(StateHasChanged);

            MessageService.Error("Import file failed to upload!");
        }
    }
}