@using System.Net;
@using System.Diagnostics;
@using Hangfire;
@using LANCommander.Jobs.Background;
@inject HttpClient HttpClient
@inject NavigationManager Navigator
@inject ArchiveService ArchiveService
@inject IMessageService MessageService
@inject IJSRuntime JS

<Space Direction="DirectionVHType.Vertical" Style="width: 100%">
    <SpaceItem>
        <Table TItem="Archive" DataSource="@Game.Archives.OrderByDescending(a => a.CreatedOn)" HidePagination="true">
            <PropertyColumn Property="a => a.Version" />
            <PropertyColumn Property="a => a.CompressedSize">
                @ByteSizeLib.ByteSize.FromBytes(context.CompressedSize)
            </PropertyColumn>
            <PropertyColumn Property="a => a.CreatedBy">
                @context.CreatedBy?.UserName
            </PropertyColumn>
            <PropertyColumn Property="a => a.CreatedOn" Format="MM/dd/yyyy hh:mm tt" />
            <ActionColumn Title="">
                <Space Style="display: flex; justify-content: end">
                    <SpaceItem>
                        <Button OnClick="() => Download(context)" Icon="@IconType.Outline.Download" Type="@ButtonType.Text" />
                    </SpaceItem>
                    <SpaceItem>
                        <Popconfirm Title="Are you sure you want to delete this archive?" OnConfirm="() => Delete(context)">
                            <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
                        </Popconfirm>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    </SpaceItem>

    <SpaceItem>
        <GridRow Justify="end">
            <GridCol>
                <Button OnClick="AddArchive" Type="@ButtonType.Primary">Upload Archive</Button>
            </GridCol>
        </GridRow>
    </SpaceItem>
</Space>

@{
    RenderFragment Footer =
    @<Template>
        <Button OnClick="UploadArchiveJS" Disabled="@(File == null || Uploading)" Type="@ButtonType.Primary">Upload</Button>
        <Button OnClick="Clear" Disabled="File == null || Uploading" Danger>Clear</Button>
        <Button OnClick="Cancel">Cancel</Button>
    </Template>;
}

<Modal Visible="@ModalVisible" Title="Upload Archive" OnOk="UploadArchiveJS" OnCancel="Cancel" Footer="@Footer">
    <Form Model="@Archive" Layout="@FormLayout.Vertical">
        <FormItem Label="Version">
            <Input @bind-Value="@context.Version" /> 
        </FormItem>

        <FormItem Label="Changelog">
            <TextArea @bind-Value="@context.Changelog" MaxLength=500 ShowCount />
        </FormItem>

        <FormItem>
            <Space Direction="DirectionVHType.Horizontal">
                <SpaceItem>
                     <InputFile id="FileInput" OnChange="FileSelected" hidden />
                     <Upload Name="files" FileList="FileList">
                         <label class="ant-btn" for="FileInput">
                             <Icon Type="upload" />
                            @if (File == null)
                            {
                                <Text>Select File</Text>
                            }
                            else
                            {
                                <Text>Change File</Text>
                            }
                        </label>
                     </Upload>
                </SpaceItem>
                <SpaceItem>
                    @if (File != null)
                    {
                        <Text>@File.Name (@ByteSizeLib.ByteSize.FromBytes(File.Size))</Text>
                    }
                </SpaceItem>
            </Space>
        </FormItem>

        <FormItem>
            <Progress Percent="Progress" Status="@CurrentProgressStatus" Class="uploader-progress" />
            <Text Class="uploader-progress-rate"></Text>
        </FormItem>
    </Form>
</Modal>

 @code {
    [Parameter] public Game Game { get; set; }

    Archive Archive;

    IBrowserFile File { get; set; }
    List<UploadFileItem> FileList = new List<UploadFileItem>();

    bool IsValid = false;
    bool ModalVisible = false;

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;

    const int ChunkSize = 1024 * 1024 * 10;

    int Progress = 0;
    bool Uploading = false;
    bool Finished = false;
    double Speed = 0;

    Stopwatch Watch;
    long WatchBytesTransferred = 0;

    string Filename;

    ProgressStatus CurrentProgressStatus {
        get
        {
            if (Finished)
                return ProgressStatus.Success;
            else if (Uploading)
                return ProgressStatus.Active;
            else
                return ProgressStatus.Normal;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Game.Archives == null)
            Game.Archives = new List<Archive>();

        HttpClient.BaseAddress = new Uri(Navigator.BaseUri);

        Archive = new Archive()
        {
            GameId = Game.Id,
            Id = Guid.NewGuid()
        };
    }

    private async Task Download(Archive archive)
    {
        string url = $"/Download/Game/{archive.Id}";

        await JS.InvokeAsync<object>("open", url, "_blank");
    }

    private void AddArchive()
    {
        Archive = new Archive()
        {
            GameId = Game.Id,
            Id = Guid.NewGuid()
        };

        ModalVisible = true;
    }

    private async Task Delete(Archive archive)
    {
        try
        {
            await ArchiveService.Delete(archive);

            await MessageService.Success("Archive deleted!");
        }
        catch (Exception ex)
        {
            await MessageService.Error("Archive could not be deleted.");
        }
    }

    private void Clear()
    {
        File = null;
    }

    private void Cancel()
    {
        File = null;
        ModalVisible = false;
    }

    private async void FileSelected(InputFileChangeEventArgs args)
    {
        File = args.File;
    }

    private async Task UploadArchiveJS()
    {
        Uploading = true;

        var dotNetReference = DotNetObjectReference.Create(this);

        await JS.InvokeVoidAsync("Uploader.Upload", "FileInput", dotNetReference);

        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async void OnUploadComplete(string data)
    {
        if (Guid.TryParse(data, out var objectKey))
        {
            Uploading = false;
            Finished = true;

            Archive.ObjectKey = objectKey.ToString();
            Archive.CompressedSize = File.Size;

            var originalArchive = Game.Archives.OrderByDescending(a => a.CreatedOn).FirstOrDefault();

            Archive = await ArchiveService.Add(Archive);

            ModalVisible = false;

            await InvokeAsync(StateHasChanged);

            await MessageService.Success("Archive uploaded!");

            if (originalArchive != null)
                BackgroundJob.Enqueue<PatchArchiveBackgroundJob>(x => x.Execute(originalArchive.Id, Archive.Id));
        }
        else
        {
            ModalVisible = false;

            await InvokeAsync(StateHasChanged);

            await MessageService.Error("Archive failed to upload!");
        }
    }
}
