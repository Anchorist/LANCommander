@using System.Net;
@using System.Diagnostics;
@using Hangfire;
@using LANCommander.Jobs.Background;
@inject HttpClient HttpClient
@inject NavigationManager Navigator
@inject ArchiveService ArchiveService
@inject IMessageService MessageService
@inject IJSRuntime JS

@{
    RenderFragment Footer =
    @<Template>
        <Button OnClick="UploadArchiveJS" Disabled="@(File == null || Uploading)" Type="@ButtonType.Primary">Upload</Button>
        <Button OnClick="Clear" Disabled="File == null || Uploading" Danger>Clear</Button>
        <Button OnClick="Cancel">Cancel</Button>
    </Template>;
}

<Modal Visible="@Visible" Title="Upload Archive" OnOk="UploadArchiveJS" OnCancel="Cancel" Footer="@Footer">
    <Form Model="@Archive" Layout="@FormLayout.Vertical">
        <FormItem Label="Version">
            <Input @bind-Value="@context.Version" /> 
        </FormItem>

        <FormItem Label="Changelog">
            <TextArea @bind-Value="@context.Changelog" MaxLength=500 ShowCount />
        </FormItem>

        <FormItem>
            <Space Direction="DirectionVHType.Horizontal">
                <SpaceItem>
                     <InputFile id="FileInput" OnChange="FileSelected" hidden />
                     <Upload Name="files" FileList="FileList">
                         <label class="ant-btn" for="FileInput">
                             <Icon Type="upload" />
                            @if (File == null)
                            {
                                <Text>Select File</Text>
                            }
                            else
                            {
                                <Text>Change File</Text>
                            }
                        </label>
                     </Upload>
                </SpaceItem>
                <SpaceItem>
                    @if (File != null)
                    {
                        <Text>@File.Name (@ByteSizeLib.ByteSize.FromBytes(File.Size))</Text>
                    }
                </SpaceItem>
            </Space>
        </FormItem>

        <FormItem>
            <Progress Percent="Progress" Status="@CurrentProgressStatus" Class="uploader-progress" />
            <Text Class="uploader-progress-rate"></Text>
        </FormItem>
    </Form>
</Modal>

@code {
    [Parameter] public EventCallback<Archive> OnArchiveUploaded { get; set; }

    Archive Archive;

    IBrowserFile File { get; set; }
    List<UploadFileItem> FileList = new List<UploadFileItem>();

    bool IsValid = false;
    bool Visible = false;

    int Progress = 0;
    bool Uploading = false;
    bool Finished = false;
    double Speed = 0;

    string Filename;

    ProgressStatus CurrentProgressStatus {
        get
        {
            if (Finished)
                return ProgressStatus.Success;
            else if (Uploading)
                return ProgressStatus.Active;
            else
                return ProgressStatus.Normal;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        HttpClient.BaseAddress = new Uri(Navigator.BaseUri);
    }

    private void Clear()
    {
        File = null;
    }

    private void Cancel()
    {
        File = null;
        Visible = false;
    }

    private async void FileSelected(InputFileChangeEventArgs args)
    {
        File = args.File;
    }

    public async Task Open(Archive archive)
    {
        Archive = archive;

        Visible = true;

        await InvokeAsync(StateHasChanged);

        await Task.Delay(500);

        if (!String.IsNullOrWhiteSpace(archive.ObjectKey) && archive.ObjectKey != Guid.Empty.ToString())
            await JS.InvokeVoidAsync("Uploader.Init", "FileInput", archive.ObjectKey.ToString());
        else
            await JS.InvokeVoidAsync("Uploader.Init", "FileInput", "");


    }

    private async Task UploadArchiveJS()
    {
        Uploading = true;

        var dotNetReference = DotNetObjectReference.Create(this);

        await JS.InvokeVoidAsync("Uploader.Upload", dotNetReference);

        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async void OnUploadComplete(string data)
    {
        if (Guid.TryParse(data, out var objectKey))
        {
            Uploading = false;
            Finished = true;

            Archive.ObjectKey = objectKey.ToString();
            Archive.CompressedSize = File.Size;

            Visible = false;

            await InvokeAsync(StateHasChanged);

            if (OnArchiveUploaded.HasDelegate)
                await OnArchiveUploaded.InvokeAsync(Archive);

            await MessageService.Success("Archive uploaded!");
        }
        else
        {
            Visible = false;

            await InvokeAsync(StateHasChanged);

            await MessageService.Error("Archive failed to upload!");
        }
    }
}
