@page "/Games"
@using AntDesign.TableModels;
@using LANCommander.Extensions;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.EntityFrameworkCore;
@attribute [Authorize]
@inject GameService GameService
@inject NavigationManager NavigationManager

<PageHeader Title="Games">
    <PageHeaderExtra>
        <Space Direction="DirectionVHType.Horizontal">
            <SpaceItem>
                <Search Placeholder="Search" @bind-Value="Search" BindOnInput DebounceMilliseconds="150" OnChange="() => LoadData()" />
            </SpaceItem>
            <SpaceItem>
                <Button OnClick="() => Add()" Type="@ButtonType.Primary">Add Game</Button>
            </SpaceItem>
        </Space>
    </PageHeaderExtra>
</PageHeader>

<TableCustomizer @ref="TableCustomizer" TItem="Game" Table="Table" Key="Games" @bind-Visible="FieldPickerVisible" />

<Table @ref="Table" TItem="Game" DataSource="@Games" Loading="@Loading" PageSize="25">
    <PickableColumn TData="string" Title="Icon">
        <Image Src="@GetIcon(context)" Height="32" Width="32" Preview="false"></Image>
    </PickableColumn>
    
    <PickablePropertyColumn Property="g => g.Title" Sortable Filterable />
    
    <PickablePropertyColumn Property="g => g.SortTitle" Title="Sort Title" Sortable Filterable />
    
    <PickablePropertyColumn Property="g => g.ReleasedOn" Format="MM/dd/yyyy" Sortable Filterable />
    
    <PickablePropertyColumn Property="g => g.CreatedOn" Format="MM/dd/yyyy hh:mm tt" Sortable />
    
    <PickablePropertyColumn Property="g => g.CreatedBy" Sortable>
        @context.CreatedBy?.UserName
    </PickablePropertyColumn>
    
    <PickablePropertyColumn Property="g => g.UpdatedOn" Format="MM/dd/yyyy hh:mm tt" Sortable />
    
    <PickablePropertyColumn Property="g => g.UpdatedBy" Sortable>
        @context.UpdatedBy?.UserName
    </PickablePropertyColumn>
    
    <PickablePropertyColumn Property="g => g.Singleplayer" Sortable Filterable>
        <Checkbox Disabled="true" Checked="context.Singleplayer" />
    </PickablePropertyColumn>
    
    <PickableColumn TData="bool" Title="Multiplayer">
        <Checkbox Disabled="true" Checked="context.MultiplayerModes?.Count > 0" />
    </PickableColumn>

    <PickableColumn TData="int" Title="Total Keys">
        @context.Keys?.Count
    </PickableColumn>

    <PickableColumn TData="int" Title="Keys Allocated">
        @context.Keys?.Count(k => k.ClaimedOn.HasValue)
    </PickableColumn>

    <PickableColumn TData="string[]" Title="Developers">
        @foreach (var dev in context.Developers)
        {
            <Tag>@dev.Name</Tag>
        }
    </PickableColumn>

    <PickableColumn TData="string[]" Title="Publishers">
        @foreach (var pub in context.Publishers)
        {
            <Tag>@pub.Name</Tag>
        }
    </PickableColumn>

    <PickableColumn TData="string[]" Title="Genres">
        @foreach (var genre in context.Genres)
        {
            <Tag>@genre.Name</Tag>
        }
    </PickableColumn>

    <PickableColumn TData="Data.Enums.MultiplayerType[]" Title="Multiplayer Modes">
        @foreach (var mode in context.MultiplayerModes.Select(mm => mm.Type).Distinct())
        {
            <Tag>@mode.GetDisplayName()</Tag>
        }
    </PickableColumn>

    <ActionColumn Title="" Style="text-align: right">
        <TitleTemplate>
            <div style="text-align: right">
                <Button Icon="@IconType.Outline.Edit" Type="@ButtonType.Text" OnClick="() => OpenFieldPicker()" />
            </div>
        </TitleTemplate>
        <ChildContent>
            <Space Direction="DirectionVHType.Horizontal">
                <SpaceItem>
                    <Button OnClick="() => ViewSaves(context)">Saves</Button>
                </SpaceItem>
                <SpaceItem>
                    <a href="/Games/@(context.Id)" class="ant-btn ant-btn-primary">Edit</a>
                </SpaceItem>
                <SpaceItem>
                    <Popconfirm OnConfirm="() => Delete(context)" Title="Are you sure you want to delete this game?">
                        <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
                    </Popconfirm>
                </SpaceItem>
            </Space>
        </ChildContent>
    </ActionColumn>
</Table>

 @code {
    IEnumerable<Game> Games { get; set; } = new List<Game>();

    bool Loading = true;
    bool FieldPickerVisible = false;

    string Search = "";

    Table<Game> Table;
    TableCustomizer<Game> TableCustomizer;

    Dictionary<int, bool> ColumnVisibility = new Dictionary<int, bool>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadData();

            Loading = false;

            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Games = await GameService.Get(g => g.Title.ToLower().Contains(Search.ToLower().Trim()) || g.SortTitle.ToLower().Contains(Search.ToLower().Trim())).OrderBy(g => String.IsNullOrWhiteSpace(g.SortTitle) ? g.Title : g.SortTitle).ToListAsync();
    }

    private string GetIcon(Game game)
    {
        return $"/api/Games/{game.Id}/Icon.png";
    }

    private void Add()
    {
        NavigationManager.NavigateTo("/Games/Add");
    }

    private void ViewSaves(Game game)
    {
        NavigationManager.NavigateTo($"/Games/{game.Id}/Saves", true);
    }

    private void Edit(Game game)
    {
        NavigationManager.NavigateTo($"/Games/{game.Id}/Edit", true);
    }

    private async Task Delete(Game game)
    {
        Games = new List<Game>();

        Loading = true;

        await GameService.Delete(game);

        Games = await GameService.Get(x => true).OrderBy(g => String.IsNullOrWhiteSpace(g.SortTitle) ? g.Title : g.SortTitle).ToListAsync();

        Loading = false;
    }

    private async Task OpenFieldPicker()
    {
        FieldPickerVisible = true;
    }

    private async Task CloseFieldPicker()
    {
        FieldPickerVisible = false;
    }
}
