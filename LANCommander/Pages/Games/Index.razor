@page "/Games"
@using AntDesign.TableModels;
@using LANCommander.Extensions;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.EntityFrameworkCore;
@attribute [Authorize]
@inject GameService GameService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage BrowserStorage

<PageHeader Title="Games">
    <PageHeaderExtra>
        <Space Direction="DirectionVHType.Horizontal">
            <SpaceItem>
                <Search Placeholder="Search" @bind-Value="Search" BindOnInput DebounceMilliseconds="150" OnChange="() => LoadData()" />
            </SpaceItem>
            <SpaceItem>
                <Button OnClick="() => Add()" Type="@ButtonType.Primary">Add Game</Button>
            </SpaceItem>
        </Space>
    </PageHeaderExtra>
</PageHeader>

<Drawer Closable="true" Visible="@FieldPickerVisible" Placement="right" Title="@("Fields")" OnClose="() => CloseFieldPicker()">
    <Space Direction="@DirectionVHType.Vertical">
        <SpaceItem><Switch Checked="FieldVisible(Field.Icon)" OnChange="(state) => ChangeFieldVisibility(Field.Icon, state)" /> @Field.Icon.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.Title)" OnChange="(state) => ChangeFieldVisibility(Field.Title, state)" /> @Field.Title.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.SortTitle)" OnChange="(state) => ChangeFieldVisibility(Field.SortTitle, state)" /> @Field.SortTitle.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.ReleasedOn)" OnChange="(state) => ChangeFieldVisibility(Field.ReleasedOn, state)" /> @Field.ReleasedOn.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.CreatedOn)" OnChange="(state) => ChangeFieldVisibility(Field.CreatedOn, state)" /> @Field.CreatedOn.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.CreatedBy)" OnChange="(state) => ChangeFieldVisibility(Field.CreatedBy, state)" /> @Field.CreatedBy.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.UpdatedOn)" OnChange="(state) => ChangeFieldVisibility(Field.UpdatedOn, state)" /> @Field.UpdatedOn.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.UpdatedBy)" OnChange="(state) => ChangeFieldVisibility(Field.UpdatedBy, state)" /> @Field.UpdatedBy.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.Singleplayer)" OnChange="(state) => ChangeFieldVisibility(Field.Singleplayer, state)" /> @Field.Singleplayer.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.Multiplayer)" OnChange="(state) => ChangeFieldVisibility(Field.Multiplayer, state)" /> @Field.Multiplayer.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.TotalKeys)" OnChange="(state) => ChangeFieldVisibility(Field.TotalKeys, state)" /> @Field.TotalKeys.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.KeysAllocated)" OnChange="(state) => ChangeFieldVisibility(Field.KeysAllocated, state)" /> @Field.KeysAllocated.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.Developers)" OnChange="(state) => ChangeFieldVisibility(Field.Developers, state)" /> @Field.Developers.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.Publishers)" OnChange="(state) => ChangeFieldVisibility(Field.Publishers, state)" /> @Field.Publishers.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.Genres)" OnChange="(state) => ChangeFieldVisibility(Field.Genres, state)" /> @Field.Genres.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.MultiplayerModes)" OnChange="(state) => ChangeFieldVisibility(Field.MultiplayerModes, state)" /> @Field.MultiplayerModes.GetDisplayName()</SpaceItem>
        <SpaceItem><Switch Checked="FieldVisible(Field.ArchiveSize)" OnChange="(state) => ChangeFieldVisibility(Field.ArchiveSize, state)" /> @Field.ArchiveSize.GetDisplayName()</SpaceItem>
    </Space>
</Drawer>

<Table @ref="Table" TItem="Game" DataSource="@Games" Loading="@Loading" PageSize="25">
    @if (FieldVisible(Field.Icon))
    {
        <Column TData="string">
            <Image Src="@GetIcon(context)" Height="32" Width="32" Preview="false"></Image>
        </Column>
    }
    
    @if (FieldVisible(Field.Title))
    {
        <PropertyColumn Property="g => g.Title" Sortable Filterable />
    }

    @if (FieldVisible(Field.SortTitle))
    {
        <PropertyColumn Property="g => g.SortTitle" Title="@Field.SortTitle.GetDisplayName()" Sortable Filterable />
    }

    @if (FieldVisible(Field.ReleasedOn))
    {
        <PropertyColumn Property="g => g.ReleasedOn" Format="MM/dd/yyyy" Sortable Filterable />
    }

    @if (FieldVisible(Field.CreatedOn))
    {
        <PropertyColumn Property="g => g.CreatedOn" Format="MM/dd/yyyy hh:mm tt" Sortable />
    }
    
    @if (FieldVisible(Field.CreatedBy))
    {
        <PropertyColumn Property="g => g.CreatedBy" Sortable>
            @context.CreatedBy?.UserName
        </PropertyColumn>
    }

    @if (FieldVisible(Field.UpdatedOn))
    {
        <PropertyColumn Property="g => g.UpdatedOn" Format="MM/dd/yyyy hh:mm tt" Sortable />
    }

    @if (FieldVisible(Field.UpdatedBy))
    {
        <PropertyColumn Property="g => g.UpdatedBy" Sortable>
            @context.UpdatedBy?.UserName
        </PropertyColumn>
    }

    @if (FieldVisible(Field.Singleplayer))
    {
        <PropertyColumn Property="g => g.Singleplayer" Sortable Filterable>
            <Checkbox Disabled="true" Checked="context.Singleplayer" />
        </PropertyColumn>
    }

    @if (FieldVisible(Field.Multiplayer))
    {
        <Column TData="bool" Title="@Field.Multiplayer.GetDisplayName()">
            <Checkbox Disabled="true" Checked="context.MultiplayerModes?.Count > 0" />
        </Column>
    }

    @if (FieldVisible(Field.TotalKeys))
    {
        <Column TData="int" Title="@Field.TotalKeys.GetDisplayName()">
            @context.Keys?.Count
        </Column>
    }

    @if (FieldVisible(Field.KeysAllocated))
    {
        <Column TData="int" Title="@Field.KeysAllocated.GetDisplayName()">
            @context.Keys?.Count(k => k.ClaimedOn.HasValue)
        </Column>
    }

    @if (FieldVisible(Field.Developers))
    {
        <Column TData="string[]" Title="@Field.Developers.GetDisplayName()">
            @foreach (var dev in context.Developers)
            {
                <Tag>@dev.Name</Tag>
            }
        </Column>
    }

    @if (FieldVisible(Field.Publishers))
    {
        <Column TData="string[]" Title="@Field.Publishers.GetDisplayName()">
            @foreach (var pub in context.Publishers)
            {
                <Tag>@pub.Name</Tag>
            }
        </Column>
    }

    @if (FieldVisible(Field.Genres))
    {
        <Column TData="string[]" Title="@Field.Genres.GetDisplayName()">
            @foreach (var genre in context.Genres)
            {
                <Tag>@genre.Name</Tag>
            }
        </Column>
    }

    @if (FieldVisible(Field.MultiplayerModes))
    {
        <Column TData="Data.Enums.MultiplayerType[]" Title="@Field.MultiplayerModes.GetDisplayName()">
            @foreach (var mode in context.MultiplayerModes.Select(mm => mm.Type).Distinct())
            {
                <Tag>@mode.GetDisplayName()</Tag>
            }
        </Column>
    }

    @if (FieldVisible(Field.ArchiveSize))
    {
        long? compressedSize = context.Archives?.OrderByDescending(a => a.CreatedOn).FirstOrDefault()?.CompressedSize;

        <Column TData="long" Title="@Field.ArchiveSize.GetDisplayName()">
            @if (compressedSize.HasValue)
            {
                @ByteSizeLib.ByteSize.FromBytes((double)compressedSize)
            }
        </Column>
    }

    <ActionColumn Title="" Style="text-align: right">
        <TitleTemplate>
            <div style="text-align: right">
                <Button Icon="@IconType.Outline.Edit" Type="@ButtonType.Text" OnClick="() => OpenFieldPicker()" />
            </div>
        </TitleTemplate>
        <ChildContent>
            <Space Direction="DirectionVHType.Horizontal">
                <SpaceItem>
                    <Button OnClick="() => ViewSaves(context)">Saves</Button>
                </SpaceItem>
                <SpaceItem>
                    <a href="/Games/@(context.Id)" class="ant-btn ant-btn-primary">Edit</a>
                </SpaceItem>
                <SpaceItem>
                    <Popconfirm OnConfirm="() => Delete(context)" Title="Are you sure you want to delete this game?">
                        <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
                    </Popconfirm>
                </SpaceItem>
            </Space>
        </ChildContent>
    </ActionColumn>
</Table>

@code {
    IEnumerable<Game> Games { get; set; } = new List<Game>();

    bool Loading = true;
    bool FieldPickerVisible = false;

    string Search = "";

    ITable Table;

    Dictionary<Field, bool> FieldVisibility = new Dictionary<Field, bool>()
    {
        { Field.Icon, true },
        { Field.Title, true },
        { Field.SortTitle, true },
        { Field.ReleasedOn, true },
        { Field.CreatedOn, true },
        { Field.CreatedBy, true },
        { Field.UpdatedOn, true },
        { Field.UpdatedBy, true }
    };

    enum Field
    {
        Icon,
        Title,
        [Display(Name = "Sort Title")]
        SortTitle,
        [Display(Name = "Released On")]
        ReleasedOn,
        [Display(Name = "Created On")]
        CreatedOn,
        [Display(Name = "Created By")]
        CreatedBy,
        [Display(Name = "Updated On")]
        UpdatedOn,
        [Display(Name = "Updated By")]
        UpdatedBy,
        Singleplayer,
        Multiplayer,
        [Display(Name = "Total Keys")]
        TotalKeys,
        [Display(Name = "Keys Allocated")]
        KeysAllocated,
        Developers,
        Publishers,
        Genres,
        [Display(Name = "Multiplayer Modes")]
        MultiplayerModes,
        [Display(Name = "Archive Size")]
        ArchiveSize,
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadData();

            Loading = false;

            var storedFieldVisibility = await BrowserStorage.GetAsync<Dictionary<Field, bool>>("Views.Games.FieldPicker");

            if (storedFieldVisibility.Success && storedFieldVisibility.Value != null)
                FieldVisibility = storedFieldVisibility.Value;

            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Games = await GameService.Get(g => g.Title.ToLower().Contains(Search.ToLower().Trim()) || g.SortTitle.ToLower().Contains(Search.ToLower().Trim())).OrderBy(g => String.IsNullOrWhiteSpace(g.SortTitle) ? g.Title : g.SortTitle).ToListAsync();
    }

    private bool FieldVisible(Field field)
    {
        return FieldVisibility.ContainsKey(field) && FieldVisibility[field] == true;
    }

    private void ChangeFieldVisibility(Field field, bool state)
    {
        FieldVisibility[field] = state;
    }

    private string GetIcon(Game game)
    {
        return $"/api/Games/{game.Id}/Icon.png";
    }

    private void Add()
    {
        NavigationManager.NavigateTo("/Games/Add");
    }

    private void ViewSaves(Game game)
    {
        NavigationManager.NavigateTo($"/Games/{game.Id}/Saves", true);
    }

    private void Edit(Game game)
    {
        NavigationManager.NavigateTo($"/Games/{game.Id}/Edit", true);
    }

    private async Task Delete(Game game)
    {
        Games = new List<Game>();

        Loading = true;

        await GameService.Delete(game);

        Games = await GameService.Get(x => true).OrderBy(g => String.IsNullOrWhiteSpace(g.SortTitle) ? g.Title : g.SortTitle).ToListAsync();

        Loading = false;
    }

    private async Task OpenFieldPicker()
    {
        FieldPickerVisible = true;
    }

    private async Task CloseFieldPicker()
    {
        FieldPickerVisible = false;

        await BrowserStorage.SetAsync("Views.Games.FieldPicker", FieldVisibility);
    }
}
