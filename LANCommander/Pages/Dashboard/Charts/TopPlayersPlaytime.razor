@using AntDesign.Charts
@using ByteSizeLib
@inject PlaySessionService PlaySessionService

<Spin Spinning="Loading">
    <Bar Data="Data" Config="Config" JsConfig="@JsConfig" />
</Spin>

@code {
    object[] Data;

    bool Loading = true;

    string JsConfig = @"{
        meta: {
            playtime: {
                alias: 'Total Playtime',
                formatter: (v) => new Date(v * 1000).toISOString().slice(11, 19)
            }
        },
        label: {
            visible: true,
            type: 'outer-center'
        }
    }";

    BarConfig Config = new BarConfig
    {
        YField = "player",
        XField = "playtime",
        ColorField = "player",
        ForceFit = true,
        Label = new BarViewConfigLabel
        {
            Visible = false
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Dictionary<string, TimeSpan> playtimes = new Dictionary<string, TimeSpan>();

            var sessions = await PlaySessionService.Get();

            foreach (var gameSessions in sessions.Where(s => s.GameId.HasValue && s.GameId.Value != Guid.Empty).GroupBy(s => s.UserId))
            {
                var total = new TimeSpan();

                foreach (var session in gameSessions.Where(gs => gs.Start != null && gs.End != null))
                {
                    total = total.Add(session.End.Value.Subtract(session.Start.Value));
                }

                playtimes[gameSessions.First().User.UserName] = total;
            }

            Data = playtimes.OrderByDescending(pt => pt.Value).Take(10).Select(pt => new
            {
                Player = pt.Key,
                Playtime = (int)pt.Value.TotalSeconds
            }).ToArray();

            Loading = false;

            StateHasChanged();
        }
    }
}