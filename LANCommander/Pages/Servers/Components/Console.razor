@using Microsoft.AspNetCore.SignalR.Client
@using NLog;
@using XtermBlazor
@inject ServerService ServerService
@inject ServerConsoleService ServerConsoleService
@inject ServerProcessService ServerProcessService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<Xterm @ref="Terminal" Options="TerminalOptions" AddonIds="TerminalAddons" />

@code {
    [Parameter] public Guid ServerId { get; set; }
    [Parameter] public Guid ServerConsoleId { get; set; }

    Xterm? Terminal;
    HubConnection? HubConnection;
    ServerConsole ServerConsole;

    TerminalOptions TerminalOptions = new TerminalOptions
    {
        CursorBlink = true,
        CursorStyle = CursorStyle.Block
    };

    string[] TerminalAddons = new string[]
    {
        "xterm-addon-fit"
    };

    protected override async Task OnInitializedAsync()
    {
        ServerConsole = await ServerConsoleService.Get(ServerConsoleId);
        
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/gameserver"))
            .Build();

        HubConnection.On<Guid, Guid, string>("Log", (serverId, logId, message) =>
        {
            if (serverId == ServerId && logId == ServerConsoleId)
                Terminal.WriteLine(message);
        });

        await HubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);

            if (Terminal != null)
                await Terminal.InvokeAddonFunctionVoidAsync("xterm-addon-fit", "fit");

            var log = await ServerConsoleService.ReadLog(ServerConsoleId);

            foreach (var line in log)
            {
                await Terminal.WriteLine(line);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
            await HubConnection.DisposeAsync();
    }
}
