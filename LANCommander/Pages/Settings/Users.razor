@page "/Settings/Users"
@using LANCommander.Models;
@layout SettingsLayout
@inject UserManager<User> UserManager
@inject RoleManager<Role> RoleManager
@inject ISnackbar Snackbar

<MudTable Items="@UserList.Where(u => String.IsNullOrEmpty(Search) || u.UserName.ToLower().Contains(Search.ToLower().Trim()))" RowsPerPage="25" Hover="true" Elevation="0">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="Search" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Username</MudTh>
        <MudTh>Roles</MudTh>
        <MudTh>Saves</MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd>@context.UserName</MudTd>
        <MudTd>@String.Join(", ", context.Roles)</MudTd>
        <MudTd>@ByteSizeLib.ByteSize.FromBytes(context.SavesSize)</MudTd>
        <MudTd>
            @if (!context.Roles.Any(r => r == "Administrator"))
            {
                <MudButton OnClick="() => PromoteUser(context)">Promote</MudButton>
            }
            else
            {
                <MudButton OnClick="() => DemoteUser(context)">Demote</MudButton>
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private ICollection<UserViewModel> UserList { get; set; }
    private string Search { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshUserList();
    }

    private async Task RefreshUserList()
    {
        UserList = new List<UserViewModel>();

        foreach (var user in UserManager.Users)
        {
            var savePath = Path.Combine("Save", user.Id.ToString());

            long saveSize = 0;

            if (Directory.Exists(savePath))
                saveSize = new DirectoryInfo(savePath).EnumerateFiles().Sum(f => f.Length);

            UserList.Add(new UserViewModel()
            {
                Id = user.Id,
                UserName = user.UserName,
                Roles = await UserManager.GetRolesAsync(user),
                SavesSize = saveSize
            });
        }
    }

    private async Task PromoteUser(UserViewModel user)
    {
        await UserManager.AddToRoleAsync(UserManager.Users.First(u => u.UserName == user.UserName), "Administrator");
        await RefreshUserList();

        Snackbar.Add($"Promoted {user.UserName}!", Severity.Success);
    }

    private async Task DemoteUser(UserViewModel user)
    {
        if (UserList.SelectMany(u => u.Roles).Count(r => r == "Administrator") == 1)
        {
            Snackbar.Add("Cannot demote the only administrator!", Severity.Error);
        }
        else
        {
            await UserManager.RemoveFromRoleAsync(UserManager.Users.First(u => u.UserName == user.UserName), "Administrator");
            await RefreshUserList();
        }
    }
}
