@page "/Settings/Users"
@using LANCommander.Models;
@layout SettingsLayout
@inject UserManager<User> UserManager
@inject RoleManager<Role> RoleManager
@inject IMessageService MessageService

<Card Title="Users">
    <Body>
        <Table TItem="UserViewModel" DataSource="@UserList">
            <PropertyColumn Property="u => u.UserName" />
            <PropertyColumn Property="u => u.Roles">
                @String.Join(", ", context.Roles)
            </PropertyColumn>
            <PropertyColumn Property="u => u.SavesSize">
                @ByteSizeLib.ByteSize.FromBytes(context.SavesSize)
            </PropertyColumn>
            <ActionColumn>
                <Space>
                    <SpaceItem>
                        @if (!context.Roles.Any(r => r == "Administrator"))
                        {
                            <Button OnClick="() => PromoteUser(context)">Promote</Button>
                        }
                        else
                        {
                            <Button OnClick="() => DemoteUser(context)">Demote</Button>
                        }
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    </Body>
</Card>

@code {
    private ICollection<UserViewModel> UserList { get; set; }
    private string Search { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshUserList();
    }

    private async Task RefreshUserList()
    {
        UserList = new List<UserViewModel>();

        foreach (var user in UserManager.Users)
        {
            var savePath = Path.Combine("Save", user.Id.ToString());

            long saveSize = 0;

            if (Directory.Exists(savePath))
                saveSize = new DirectoryInfo(savePath).EnumerateFiles().Sum(f => f.Length);

            UserList.Add(new UserViewModel()
            {
                Id = user.Id,
                UserName = user.UserName,
                Roles = await UserManager.GetRolesAsync(user),
                SavesSize = saveSize
            });
        }
    }

    private async Task PromoteUser(UserViewModel user)
    {
        await UserManager.AddToRoleAsync(UserManager.Users.First(u => u.UserName == user.UserName), "Administrator");
        await RefreshUserList();

        await MessageService.Success($"Promoted {user.UserName}!");
    }

    private async Task DemoteUser(UserViewModel user)
    {
        if (UserList.SelectMany(u => u.Roles).Count(r => r == "Administrator") == 1)
        {
            await MessageService.Error("Cannot demote the only administrator!");
        }
        else
        {
            await UserManager.RemoveFromRoleAsync(UserManager.Users.First(u => u.UserName == user.UserName), "Administrator");
            await RefreshUserList();
        }
    }
}
