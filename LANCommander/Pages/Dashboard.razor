@page "/Dashboard"

@using System.Diagnostics;
@using LANCommander.Models;

<MudGrid Justify="Justify.Center">
    <MudItem>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">CPU Utilization (%)</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (PerformanceChartData.ProcessorUtilization != null && PerformanceChartData.ProcessorUtilization.PerformanceCounter != null)
                {
                    <MudChart ChartType="ChartType.Line" ChartSeries="@(PerformanceChartData.ProcessorUtilization.ToSeriesList("CPU %"))" Width="100%" Height="250px"></MudChart>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Upload Rate (MB/s)</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudChart ChartType="ChartType.Line" ChartSeries="@PerformanceChartData.NetworkUploadRate.Select(x => x.Value.ToSeries(x.Key)).ToList()" Width="100%" Height="250px"></MudChart>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Download Rate (MB/s)</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudChart ChartType="ChartType.Line" ChartSeries="@PerformanceChartData.NetworkDownloadRate.Select(x => x.Value.ToSeries(x.Key)).ToList()" Width="100%" Height="250px"></MudChart>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    int cpuTime = 0;

    int RecordTime = 60;

    private PerformanceChartData PerformanceChartData = new PerformanceChartData()
    {
        ProcessorUtilization = new PerformanceCounterData(),
        NetworkUploadRate = new Dictionary<string, PerformanceCounterData>(),
        NetworkDownloadRate = new Dictionary<string, PerformanceCounterData>()
    };

    protected override async Task OnInitializedAsync()
    {
        var timer = new System.Timers.Timer();

        timer.Interval = 1000;

        timer.Elapsed += async (s, e) =>
        {
            RefreshLiveData();

            await InvokeAsync(StateHasChanged);
        };

        timer.Start();
    }

    private void RefreshLiveData()
    {
        RefreshProcessorUtilization();
        RefreshNetworkUsage();
    }

    private void RefreshProcessorUtilization()
    {
        if (PerformanceChartData.ProcessorUtilization.PerformanceCounter == null)
            PerformanceChartData.ProcessorUtilization.PerformanceCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total");

        PerformanceChartData.ProcessorUtilization.Data = ShiftArrayAndInsert<double>(PerformanceChartData.ProcessorUtilization.Data, PerformanceChartData.ProcessorUtilization.PerformanceCounter.NextValue());
    }

    private void RefreshNetworkUsage()
    {
        var category = new PerformanceCounterCategory("Network Interface");

        foreach (var instance in category.GetInstanceNames())
        {
            if (!PerformanceChartData.NetworkUploadRate.ContainsKey(instance))
                PerformanceChartData.NetworkUploadRate[instance] = new PerformanceCounterData()
                {
                    PerformanceCounter = new PerformanceCounter("Network Interface", "Bytes Sent/sec", instance),
                    Data = new double[RecordTime]
                };

            if (!PerformanceChartData.NetworkDownloadRate.ContainsKey(instance))
                PerformanceChartData.NetworkDownloadRate[instance] = new PerformanceCounterData()
                {
                    PerformanceCounter = new PerformanceCounter("Network Interface", "Bytes Received/sec", instance),
                        Data = new double[RecordTime]
                };

            PerformanceChartData.NetworkUploadRate[instance].Data = ShiftArrayAndInsert<double>(PerformanceChartData.NetworkUploadRate[instance].Data, (double)PerformanceChartData.NetworkUploadRate[instance].PerformanceCounter.NextValue() / (1024 * 1024));
            PerformanceChartData.NetworkDownloadRate[instance].Data = ShiftArrayAndInsert<double>(PerformanceChartData.NetworkDownloadRate[instance].Data, (double)PerformanceChartData.NetworkDownloadRate[instance].PerformanceCounter.NextValue() / (1024 * 1024));
        }
    }

    private T[] ShiftArrayAndInsert<T>(T[] array, T input)
    {
        if (array == null || array.Length < RecordTime)
        {
            array = new T[RecordTime];
        }

        Array.Copy(array, 1, array, 0, array.Length - 1);

        array[array.Length - 1] = input;

        return array;
    }

    private PerformanceCounter[] GetCounters(string categoryName)
    {
        try
        {
            var category = PerformanceCounterCategory.GetCategories().First(c => c.CategoryName == categoryName);

            var instanceName = Process.GetCurrentProcess().ProcessName;

            return category.GetCounters(instanceName);   
        }
        catch
        {
            return new PerformanceCounter[] { };
        }
    }
}
