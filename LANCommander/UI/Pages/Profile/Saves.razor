@page "/Profile/Saves"
@using LANCommander.Models;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.EntityFrameworkCore;
@layout ProfileLayout
@inject UserManager<User> UserManager
@inject IMessageService MessageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GameSaveService GameSaveService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageHeader Title="Game Saves">
    <PageHeaderExtra>
        <Select TItem="Game"
                TItemValue="Guid"
                DataSource="@Games.OrderBy(g => String.IsNullOrWhiteSpace(g.SortTitle) ? g.Title : g.SortTitle)"
                @bind-Value="@GameId"
                LabelName="Title"
                ValueName="Id"
                Placeholder="Select a Game"
                DefaultActiveFirstOption="false"
                EnableSearch
                Style="min-width: 250px;">
            <ItemTemplate Context="game">
                <Image Src="@GetIcon(game)" Height="32" Width="32" Preview="false"></Image>
                @game.Title
            </ItemTemplate>
        </Select>
    </PageHeaderExtra>
</PageHeader>

<div style="padding: 0 24px;">
    <Table TItem="GameSave" DataSource="@GameSaves.Where(gs => gs.Game != null && gs.Game.Id == GameId)">
        <PropertyColumn Property="s => (s.Game == null ? String.Empty : s.Game.Title)" Sortable Title="Game" />
        <PropertyColumn Property="s => s.CreatedOn" Format="MM/dd/yyyy hh:mm tt" Sortable />
         <ActionColumn Title="" Style="text-align: right; white-space: nowrap">
            <Space Direction="DirectionVHType.Horizontal">
                <SpaceItem>
                     <a href="/Download/Save/@(context.Id)" target="_blank" class="ant-btn ant-btn-text ant-btn-icon-only">
                         <Icon Type="@IconType.Outline.Download" />
                     </a>
                </SpaceItem>
                <SpaceItem>
                     <Popconfirm OnConfirm="() => Delete(context)" Title="Are you sure you want to delete this game save?">
                         <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
                     </Popconfirm>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</div>

 @code {
    User User;
    ICollection<GameSave> GameSaves = new List<GameSave>();
    IEnumerable<Game> Games = new List<Game>();

    bool Loading = true;
    Guid GameId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity.IsAuthenticated)
            User = await UserManager.FindByNameAsync(authState.User.Identity.Name);

        if (User != null)
            GameSaves = User.GameSaves.OrderBy(s => s.CreatedOn).ToList();

        if (GameSaves != null && GameSaves.Count > 0)
            Games = GameSaves.Where(gs => gs.Game != null).Select(gs => gs.Game).DistinctBy(g => g.Id).ToList();

        Loading = false;
    }

    private async Task Download(Guid id)
    {
        await JSRuntime.InvokeAsync<object>("open", $"/Saves/Download/{id}", "_blank");
    }

    private async Task Delete(GameSave gameSave)
    {
        GameSaves = new List<GameSave>();

        Loading = true;

        await GameSaveService.Delete(gameSave);

        GameSaves = await GameSaveService.Get(gs => gs.UserId == User.Id).OrderBy(gs => gs.Game.Title).ThenByDescending(gs => gs.UpdatedOn).ToListAsync();

        Loading = false;
    }

    private string GetIcon(Game game)
    {
        var media = game?.Media?.FirstOrDefault(m => m.Type == Data.Enums.MediaType.Icon);

        if (media != null)
            return $"/api/Media/{media.Id}/Download?fileId={media.FileId}";
        else
            return "/favicon.ico";
    }
}
