@page "/Launcher"
@layout BasicLayout
@using LANCommander.Models
@inject UpdateService UpdateService
@inject NavigationManager NavigationManager

<div class="launcher-download">
    @switch (Settings.Theme)
    {
        case LANCommanderTheme.Light:
            <img src="/static/logo.svg" />
            break;

        case LANCommanderTheme.Dark:
            <img src="/static/logo-dark.svg" />
            break;
    }

    <h1>Grab the Launcher!</h1>

    <a href="@DownloadLink" class="ant-btn ant-btn-primary ant-btn-lg">
        <Icon Type="@IconType.Outline.Download" />
        <span>Download</span>
    </a>

    <Space>
        <SpaceItem>
            <Button Type="@ButtonType.Link" OnClick="@(() => NavigationManager.NavigateTo("Identity/Account/Login"))">Login</Button>
            <Button Type="@ButtonType.Link" OnClick="@(() => NavigationManager.NavigateTo("Identity/Account/Register"))">Register</Button>
        </SpaceItem>
    </Space>
</div>

@code {
    LANCommanderSettings Settings = SettingService.GetSettings();

    string DownloadLink { get; set; } = "/Launcher/Download";

    protected override async Task OnInitializedAsync()
    {
        var version = UpdateService.GetCurrentVersion();
        var fileName = $"LANCommander.Client-Windows-x64-v{version}.zip";
        var path = Path.Combine(Settings.Launcher.StoragePath, fileName);

        if (!File.Exists(path) || !Settings.Launcher.HostUpdates)
        {
            var release = await UpdateService.GetRelease(version);

            if (release == null)
                release = (await UpdateService.GetReleases(1)).FirstOrDefault();

            if (release != null)
            {
                var asset = release.Assets.FirstOrDefault(a => a.Name == fileName);

                if (asset != null)
                    DownloadLink = asset.BrowserDownloadUrl;
            }
        }
    }
}
