@page "/Settings/Updates"
@using LANCommander.Models;
@using Octokit
@using Semver
@layout SettingsLayout
@inject SettingService SettingService
@inject IMessageService MessageService
@inject UpdateService UpdateService
@attribute [Authorize(Roles = "Administrator")]

<PageHeader Title="Updates">
    <PageHeaderExtra>
        <Button Type="@ButtonType.Primary" OnClick="Update" Disabled="@(!UpdateAvailable || Updating)" Loading="Updating">Update</Button>
    </PageHeaderExtra>
</PageHeader>

<div style="padding: 0 24px;">
    <Form Model="Settings" Layout="@FormLayout.Vertical">
        <FormItem Label="Storage Path">
            <FilePicker Root="@RootPath" EntrySelectable="x => x is FileManagerDirectory" @bind-Value="@context.Update.StoragePath" OkText="Select Path" Title="Choose Path" OnSelected="OnPathSelected" />
        </FormItem>

        <FormItem Label="Host Client Updates">
            <Switch @bind-Checked="context.Update.HostClientUpdates" />
        </FormItem>

        <FormItem>
            <Button OnClick="Save" Type="@ButtonType.Primary">Save</Button>
        </FormItem>
    </Form>

    @if (!Loading && !UpdateAvailable)
    {
        <Alert Type="@AlertType.Success" Message="You are on the latest version!" ShowIcon="true" />
    }
    else if (!Loading && UpdateAvailable)
    {
        <Alert Type="@AlertType.Info" Message="A newer version of LANCommander is available" ShowIcon="true" />
    }
    else
    {
        <Alert Type="@AlertType.Warning" Message="Loading release information..." ShowIcon="true" />
    }

    <Space Direction="DirectionVHType.Vertical" Style="width: 100%;">
        @if (Releases != null && Releases.Count() > 0)
        {
            foreach (var release in Releases)
            {
                <SpaceItem>
                    <Card Title="@release.Name">
                        <TitleTemplate>
                            @release.Name <span style="font-size: 70%; margin-right: 6px;">@release.PublishedAt.GetValueOrDefault().ToString("MMMM d yyyy")</span>

                            @if (Releases.First().Equals(release))
                            {
                                <Tag Color="@PresetColor.Gold.ToString()">Latest</Tag>
                            }

                            @if (release.TagName == $"v{CurrentVersion.ToString()}")
                            {
                                <Tag Color="@PresetColor.Blue.ToString()">Current</Tag>
                            }
                        </TitleTemplate>
                        <Extra>
                            <a href="@release.HtmlUrl" target="_blank">View Release</a>
                        </Extra>
                        <Body>
                            @((MarkupString)Markdig.Markdown.ToHtml(release.Body))
                        </Body>
                    </Card>
                </SpaceItem>
            }
        }
        else
        {
            for (var i = 0; i < 5; i++)
            {
                <Card Loading="true" Style="width: 100%;"></Card>
            }
        }
    </Space>
</div>

@code {
    LANCommanderSettings Settings;

    string RootPath = Path.GetPathRoot(Directory.GetCurrentDirectory());

    bool Loading { get; set; } = true;
    bool Updating { get; set; } = false;
    bool UpdateAvailable { get; set; } = false;
    SemVersion LatestVersion { get; set; }
    SemVersion CurrentVersion { get; set; }
    IEnumerable<Release> Releases { get; set; } = new List<Release>();

    protected override async Task OnInitializedAsync()
    {
        CurrentVersion = UpdateService.GetCurrentVersion();
        UpdateAvailable = await UpdateService.UpdateAvailable();
        LatestVersion = await UpdateService.GetLatestVersion();
        Releases = await UpdateService.GetReleases(5);

        Loading = false;
    }

    async Task Update()
    {
        try {
            Updating = true;

            if (Settings.Update.HostClientUpdates)
                await UpdateService.DownloadClientRelease(Releases.First());

            await UpdateService.DownloadServerRelease(Releases.First());
        }
        catch (NotImplementedException ex) {
            MessageService.Error(ex.Message);
        }
        catch (Exception ex)
        {
            MessageService.Error("An unknown error occurred while updating. Please check the logs");
        }
    }

    void Save()
    {
        try
        {
            SettingService.SaveSettings(Settings);
            MessageService.Success("Settings saved!");
        }
        catch
        {
            MessageService.Error("An unknown error occurred.");
        }
    }

    void OnPathSelected(string path)
    {
        var appPath = Directory.GetCurrentDirectory();

        if (path != null && path.StartsWith(appPath))
            path = path.Substring(appPath.Length).TrimStart(Path.DirectorySeparatorChar).TrimEnd(Path.DirectorySeparatorChar);

        Settings.Update.StoragePath = path;
    }
}
