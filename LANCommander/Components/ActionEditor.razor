@using LANCommander.Data.Models
@using LANCommander.Extensions
@using LANCommander.Models;
@using System.IO.Compression;
@inject ModalService ModalService

<Space Direction="DirectionVHType.Vertical" Size="@("large")" Style="width: 100%">
    <SpaceItem>
        <Table TItem="Data.Models.Action" DataSource="@OrderedActions" HidePagination="true" Style="border: 1px solid #f0f0f0">
            <PropertyColumn Property="a => a.Name">
                <Input Type="text" @bind-Value="context.Name" />
            </PropertyColumn>
            <PropertyColumn Property="a => a.Path">
                <Space Style="display: flex">
                    <SpaceItem Style="flex-grow: 1">
                        <Input Type="text" @bind-Value="context.Path" />
                    </SpaceItem>
                    <SpaceItem>
                        <Button OnClick="() => BrowseForActionPath(context)" Type="@ButtonType.Primary" Icon="@IconType.Outline.FolderOpen" />
                    </SpaceItem>
                </Space>
            </PropertyColumn>
            <PropertyColumn Property="a => a.Arguments">
                <Input Type="text" @bind-Value="context.Arguments" />
            </PropertyColumn>
            <PropertyColumn Property="a => a.WorkingDirectory" Title="Working Dir">
                <Input Type="text" @bind-Value="context.WorkingDirectory" />
            </PropertyColumn>
            <PropertyColumn Property="a => a.PrimaryAction" Title="Primary" Style="text-align: center">
                <Checkbox @bind-Checked="context.PrimaryAction" />
            </PropertyColumn>
            <ActionColumn>
                <Space Style="display: flex; justify-content: end">
                    <SpaceItem>
                        <Button OnClick="() => MoveUp(context)" Icon="@IconType.Outline.Up" Type="@ButtonType.Text" />
                        <Button OnClick="() => MoveDown(context)" Icon="@IconType.Outline.Down" Type="@ButtonType.Text" />

                        <Popconfirm OnConfirm="() => RemoveAction(context)" Title="Are you sure you want to remove this action?">
                            <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
                        </Popconfirm>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    </SpaceItem>

    <SpaceItem>
        <GridRow Justify="end">
            <GridCol>
                <Button OnClick="AddAction" Type="@ButtonType.Primary">Add Action</Button>
            </GridCol>
        </GridRow>
    </SpaceItem>
</Space>

@code {
    [Parameter] public Game Game { get; set; }

    private List<Data.Models.Action> OrderedActions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Game.Actions == null)
            Game.Actions = new List<Data.Models.Action>();

        OrderedActions = Game.Actions.OrderBy(a => a.SortOrder).ToList();
        FixSortOrder();
    }

    private async Task AddAction()
    {
        if (OrderedActions == null)
            OrderedActions = new List<Data.Models.Action>();

        OrderedActions.Add(new Data.Models.Action()
        {
            PrimaryAction = OrderedActions.Count == 0,
            SortOrder = OrderedActions.Count
        });
    }

    private async Task RemoveAction(Data.Models.Action action)
    {
        OrderedActions.Remove(action);
    }

    private async Task MoveUp(Data.Models.Action action)
    {
        if (action.SortOrder > 0)
            OrderedActions.Move(action, action.SortOrder - 1);

        FixSortOrder();
    }

    private async Task MoveDown(Data.Models.Action action)
    {
        if (action.SortOrder < OrderedActions.Count + 1)
            OrderedActions.Move(action, action.SortOrder + 1);

        FixSortOrder();
    }

    private async void BrowseForActionPath(Data.Models.Action action)
    {
        var modalOptions = new ModalOptions()
            {
                Title = "Choose Action Executable",
                Maximizable = false,
                DefaultMaximized = true,
                Closable = true,
                OkText = "Select File"
            };

        var browserOptions = new ArchiveBrowserOptions()
            {
                ArchiveId = Game.Archives.FirstOrDefault().Id,
                Select = true,
                Multiple = false
            };

        var modalRef = await ModalService.CreateModalAsync<ArchiveBrowserDialog, ArchiveBrowserOptions, IEnumerable<ZipArchiveEntry>>(modalOptions, browserOptions);

        modalRef.OnOk = (results) =>
        {
            action.Path = results.FirstOrDefault().FullName;

            var parts = action.Path.Split('/');

            if (parts.Length > 1)
            {
                action.Path = parts.Last();
                action.WorkingDirectory = "{InstallDir}/" + String.Join('/', parts.Take(parts.Length - 1));
            }

            StateHasChanged();
            return Task.CompletedTask;
        };
    }

    private void FixSortOrder()
    {
        int i = 0;

        foreach (var action in OrderedActions)
        {
            action.SortOrder = i;

            i++;
        }

        Game.Actions = OrderedActions;
    }
}
