@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@typeparam TItem
@inject ProtectedLocalStorage BrowserStorage

@if (Table != null)
{
    <Drawer Closable="true" Visible="@Visible" Placement="right" Title="@("Fields")" OnClose="() => Close()">
        <Space Direction="@DirectionVHType.Vertical">
            @foreach (IPickableColumn column in Table.ColumnContext.HeaderColumns.Where(c => !String.IsNullOrWhiteSpace(c.Title) && typeof(IPickableColumn).IsAssignableFrom(c.GetType())))
            {
                <SpaceItem>
                    <Switch @bind-Checked="column.Visible" OnChange="(state) => ChangeColumnVisibility(column, state)" /> @column.Title
                </SpaceItem>
            }
        </Space>
    </Drawer>
}

@code {
    [Parameter] public Table<TItem> Table { get; set; }
    [Parameter] public string Key { get; set; }
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    Dictionary<int, bool> ColumnVisibility { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var storedColumnVisibility = await BrowserStorage.GetAsync<Dictionary<int, bool>>($"Views.{Key}.FieldPicker");

                if (storedColumnVisibility.Success && storedColumnVisibility.Value != null)
                    ColumnVisibility = storedColumnVisibility.Value;

                StateHasChanged();
            }
            catch
            {
                ColumnVisibility = new Dictionary<int, bool>();
                await BrowserStorage.SetAsync($"Views.{Key}.FieldPicker", ColumnVisibility);
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (ColumnVisibility == null)
            ColumnVisibility = new Dictionary<int, bool>();

        if (Table != null)
        {
            foreach (ColumnBase column in Table.ColumnContext.HeaderColumns)
            {
                ColumnVisibility[column.ColIndex] = !column.Hidden;
            }
        }
    }

    async Task ChangeColumnVisibility(IPickableColumn column, bool state)
    {
        //ColumnVisibility[1] = state;

        //await BrowserStorage.SetAsync($"Views.{Key}.FieldPicker", ColumnVisibility);

        var pickableColumn = Table.ColumnContext.Columns[column.ColIndex] as IPickableColumn;

        pickableColumn.Visible = state;

        await pickableColumn.VisibleChanged.InvokeAsync();

        await InvokeAsync(StateHasChanged);
    }

    async Task Close()
    {
        Visible = false;

        await VisibleChanged.InvokeAsync();
    }
}