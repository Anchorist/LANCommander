@inherits FeedbackComponent<MediaGrabberOptions, MediaGrabberResult>
@using LANCommander.Data.Enums;
@using LANCommander.Models;
@inject IMediaGrabberService MediaGrabberService

<Slider TValue="double" @bind-Value="Size" DefaultValue="200" Min="50" Max="400" />

<ImagePicker Size="Size" Images="Images" ValueChanged="OnImageSelected" /> 

@code {
    [Parameter] public string Search { get; set; }
    [Parameter] public MediaType Type { get; set; }
    
    MediaGrabberResult Media { get; set; }

    double Size { get; set; } = 200;

    IEnumerable<MediaGrabberResult> Results = new List<MediaGrabberResult>();
    Dictionary<string, string> Images { get; set; } = new Dictionary<string, string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Results = await MediaGrabberService.SearchAsync(Options.Type, Options.Search);

            Images = Results.ToDictionary(r => r.Id, r => r.ThumbnailUrl);

            StateHasChanged();
        }
    }

    private void OnImageSelected(string key)
    {
        Media = Results.FirstOrDefault(r => r.Id == key);
    }

    public override async Task OnFeedbackOkAsync(ModalClosingEventArgs args)
    {
        await base.OkCancelRefWithResult!.OnOk(Media);
    }
}
