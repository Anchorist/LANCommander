@page "/Games/{id:guid}/Saves"
@inherits OwningComponentBase
@attribute [Authorize(Roles = RoleService.AdministratorRoleName)]
@inject DatabaseServiceFactory DatabaseServiceFactory
@inject IMessageService MessageService
@inject ILogger<Saves> Logger

<GameEditView Id="Id" Title="Saves">
    <Table TItem="GameSave" DataSource="@context.GameSaves" Context="save" Responsive>
        <PropertyColumn Property="g => g.User" Sortable>
            @save.User?.UserName
        </PropertyColumn>
        <PropertyColumn Property="g => g.CreatedOn" Format="MM/dd/yyyy hh:mm tt" DefaultSortOrder="SortDirection.Descending" Sortable />
        <PropertyColumn Property="g => g.CreatedBy" Sortable>
            @save.CreatedBy?.UserName
        </PropertyColumn>
        <ActionColumn Title="">
            <Space Direction="SpaceDirection.Horizontal">
                <SpaceItem>
                    <a href="/Download/Save/@(save.Id)" target="_blank" class="ant-btn ant-btn-text ant-btn-icon-only">
                        <Icon Type="@IconType.Outline.Download" />
                    </a>
                </SpaceItem>
                <SpaceItem>
                    <Popconfirm OnConfirm="() => Delete(save)" Title="Are you sure you want to delete this game save?">
                        <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
                    </Popconfirm>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</GameEditView>

@code {
    [Parameter] public Guid Id { get; set; }

    async Task Delete(GameSave gameSave)
    {
        try
        {
            using (var gameSaveService = DatabaseServiceFactory.Create<GameSaveService>())
            {
                await gameSaveService.DeleteAsync(gameSave);
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Could not delete game save!");
            Logger.LogError(ex, "Could not delete the game save!");
        }
    }
}
