@page "/Games/{id:guid}/PlaySessions"
@attribute [Authorize(Roles = RoleService.AdministratorRoleName)]
@inject PlaySessionService PlaySessionService
@inject IMessageService MessageService
@inject ILogger<PlaySessions> Logger

<GameEditView Id="Id" Title="Play Sessions">
    <Table TItem="PlaySession" DataSource="@context.PlaySessions" Context="session" Responsive>
        <PropertyColumn Property="e => e.Start" Sortable Filterable />
        <PropertyColumn Property="e => e.End" Sortable Filterable />
        <PropertyColumn Property="e => e.Duration" Sortable DefaultSortOrder="SortDirection.Descending">
            @if (session.Duration.HasValue)
            {
                <Text>@($"{(int)session.Duration.Value.TotalHours}:{session.Duration.Value.Minutes:D2}:{session.Duration.Value.Seconds:D2}")</Text>
            }
        </PropertyColumn>
        <PropertyColumn Property="e => e.CreatedBy != null ? e.CreatedBy.UserName : String.Empty" Title="Player" Sortable Filterable />
        <ActionColumn Style="text-align: right">
            <Space Direction="DirectionVHType.Horizontal">
                <SpaceItem>
                    <Popconfirm OnConfirm="() => Delete(session)" Title="Are you sure you want to delete this session?">
                        <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
                    </Popconfirm>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</GameEditView>

@code {
    [Parameter] public Guid Id { get; set; }

    private async Task Delete(PlaySession session)
    {
        try
        {
            await PlaySessionService.DeleteAsync(session);
        }
        catch (Exception ex)
        {
            MessageService.Error($"Could not delete play session!");
            Logger.LogError(ex, "Could not delete the play session!");
        }
    }
}
