@page "/Games/{id:guid}/Actions"
@inherits OwningComponentBase
@attribute [Authorize(Roles = RoleService.AdministratorRoleName)]
@inject IMessageService MessageService
@inject ILogger<Actions> Logger

<GameEditView Id="Id" Title="Actions">
    <TitleExtraTemplate>
        <Space Direction="DirectionVHType.Horizontal">
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="() => Save(context)">Save</Button>
            </SpaceItem>
        </Space>
    </TitleExtraTemplate>

    <ChildContent>
        <SavePathEditor @bind-Value="context.SavePaths" GameId="context.Id" ArchiveId="@GetLatestArchiveId(context)" />
    </ChildContent>
</GameEditView>

@code {
    [Parameter] public Guid Id { get; set; }

    GameService GameService;

    protected override void OnInitialized()
    {
        GameService = ScopedServices.GetService<GameService>()!;
    }

    Guid GetLatestArchiveId(Game game)
    {
        if (game != null && game.Archives != null && game.Archives.Count > 0)
            return game.Archives.OrderByDescending(a => a.CreatedOn).FirstOrDefault()?.Id ?? Guid.Empty;
        else
            return Guid.Empty;
    }

    async Task Save(Game game)
    {
        try
        {
            game = await GameService.UpdateAsync(game);

            await MessageService.Success("Save paths updated!");
        }
        catch (Exception ex)
        {
            MessageService.Error("Could not update save paths!");
            Logger.LogError(ex, "Could not update save paths!");
        }
    }
}
