@using AntDesign.Charts
@using ByteSizeLib
@using LANCommander.Server.Models
@inject PlaySessionService PlaySessionService

<Spin Spinning="Loading">
    <div class="dashboard-chart">
        <AntDesign.Charts.Column Data="Data" Config="Config" JsConfig="@JsConfig" />
    </div>
</Spin>

@code {
    LANCommanderSettings Settings = SettingService.GetSettings();

    object[] Data;

    bool Loading = true;

    string JsConfig = @"{
        meta: {
            playtime: {
                alias: 'Average Session Playtime',
                formatter: (v) => Math.floor(v / 3600) > 0 ? `${Math.floor(v / 3600)}h ${Math.floor((v % 3600) / 60)}m` : `${Math.floor((v % 3600) / 60)}m`
            },
            game: {
                alias: 'Game'
            }
        },
        label: {
            visible: true,
            type: 'outer-center',
            style: {
                fontSize: '1px'
            }
        }
    }";

    ColumnConfig Config = new ColumnConfig
    {
        XField = "game",
        YField = "playtime",
        ColorField = "game",
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Config.Theme = Settings.Theme == LANCommanderTheme.Dark ? "dark" : "light";

            Dictionary<string, TimeSpan> playtimes = new Dictionary<string, TimeSpan>();

            var sessions = await PlaySessionService.Get();

            foreach (var gameSessions in sessions.Where(s => s.GameId.HasValue && s.GameId.Value != Guid.Empty).GroupBy(s => s.GameId))
            {
                var total = new TimeSpan();

                foreach (var session in gameSessions.Where(gs => gs.Start != null && gs.End != null))
                {
                    total = total.Add(session.End.Value.Subtract(session.Start.Value));
                }

                playtimes[gameSessions.First().Game.Title] = TimeSpan.FromSeconds(total.TotalSeconds / gameSessions.Count());
            }

            Data = playtimes.OrderByDescending(pt => pt.Value).Take(20).Select(pt => new
            {
                Game = pt.Key,
                Playtime = (int)pt.Value.TotalSeconds
            }).ToArray();

            Loading = false;

            StateHasChanged();
        }
    }
}