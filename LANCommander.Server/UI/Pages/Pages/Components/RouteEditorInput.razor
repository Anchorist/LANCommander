@using LANCommander.Server.Extensions

<Space>
    @if (!Editing)
    {
        <SpaceItem>
            <a href="@RenderedRoute">@RenderedRoute.Substring(0, RenderedRoute.Length - Value.Length)<strong>@Value</strong></a>
        </SpaceItem>

        <SpaceItem>
            <Button Size="@ButtonSize.Small" OnClick="Edit">Edit</Button>
        </SpaceItem>
    }
    else
    {
        <SpaceItem>
            <AntDesign.Input @bind-Value="Value" OnBlur="GenerateSlug" Size="@InputSize.Small">
                <AddOnBefore>@ParentRoute</AddOnBefore>
            </AntDesign.Input>
        </SpaceItem>

        <SpaceItem>
            <Button OnClick="Save">Save</Button>
        </SpaceItem>
    }
</Space>

@code {
    [Parameter] public Page Page { get; set; }
    [Parameter] public string Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    string RenderedRoute { get; set; } = "";
    string ParentRoute { get; set; } = "";
    bool Editing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        ParentRoute = PageService.GetParentRoute(Page);
    }

    protected override async Task OnParametersSetAsync()
    {
        ParentRoute = PageService.GetParentRoute(Page);
        RenderedRoute = RenderRoute();
    }

    void Edit()
    {
        Editing = true;
    }

    void GenerateSlug()
    {
        Value = Value.ToUrlSlug();
    }

    string RenderRoute()
    {
        string[] parts = new string[]
        {
            "Pages",
            ParentRoute,
            Value
        };

        return String.Join('/', parts.Where(p => !String.IsNullOrWhiteSpace(p)));
    }

    async Task Save()
    {
        GenerateSlug();

        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(Value);

        Editing = false;
    }
}
