@layout AuthenticationLayout
@page "/Login"

@using System.ComponentModel.DataAnnotations
@using LANCommander.Server.UI.Account
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IMessageService MessageService

<PageTitle>Login</PageTitle>

<Card Title="Login">
    <Form Model="Input" Method="post" OnFinish="LoginUser" Name="login" Layout="@FormLayout.Vertical">
        <FormItem Label="Username">
            <Input @bind-Value="Input.UserName" />
        </FormItem>
        <FormItem>
            <LabelTemplate>
                <Flex Justify="space-between">
                    <span>Password</span>
                    <a tabindex="-1" href="/Account/ForgotPassword">Forgot Password?</a>
                </Flex>
            </LabelTemplate>
            <ChildContent>
                <InputPassword @bind-Value="Input.Password" />
            </ChildContent>
        </FormItem>
        <FormItem Label="">
            <Flex Gap="small" Justify="flex-start">
                <Checkbox @bind-Value="Input.RememberMe" Id="remember-me" />
                <label for="remember-me">Remember Me</label>
            </Flex>
        </FormItem>
        <FormItem>
            <Button Type="@ButtonType.Primary" HtmlType="submit" Block>Login</Button>
        </FormItem>
    </Form>
</Card>

<div style="text-align: center; margin-top: 16px;">
    Don't have account yet? <a href="/Register" tabindex="-1">Register</a>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            MessageService.Error("Invalid username or password");
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";

        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
