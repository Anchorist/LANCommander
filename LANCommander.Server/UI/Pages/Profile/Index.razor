@page "/Profile"
@page "/Profile/General"
@using Microsoft.AspNetCore.Components.Authorization;
@layout ProfileLayout
@inject MediaService MediaService
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IMessageService MessageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<Index> Logger
@attribute [Authorize]

<PageHeader Title="Profile" />

<div style="padding: 0 24px;">
    <Form @ref="Form" Model="User" Layout="@FormLayout.Vertical" OnFinish="Save" ValidateOnChange="true">
        <FormItem Label="Avatar">
            <InputFile id="@("AvatarUpload")" OnChange="(e) => UploadAvatar(e)" hidden accept=".jpg,jpeg,.png" />

            <label for="AvatarUpload" style="cursor: pointer;">
                @if (String.IsNullOrWhiteSpace(AvatarUrl))
                {
                    <div class="ant-upload ant-upload-select-picture-card ant-upload-select">
                        <span class="ant-upload" tabindex="0" style="display: grid;">
                            <div>
                                <Icon Type="@IconType.Outline.Plus" />
                                <div class="ant-upload-text">Upload</div>
                            </div>
                        </span>
                    </div>
                }
                else
                {
                    <Image Width="104px" Src="@AvatarUrl" Preview="false" />
                }
            </label>
        </FormItem>

        <FormItem Label="Username" Help="Username changes require a relog">
            <Input @bind-Value="context.UserName" />
        </FormItem>

        <FormItem Label="Alias">
            <Input @bind-Value="context.Alias" />
        </FormItem>

        <FormItem Label="Email Address" Help="Email changes require a relog">
            <Input @bind-Value="context.Email" />
        </FormItem>

        <FormItem>
            <Button HtmlType="submit" Type="@ButtonType.Primary" Disabled="!Form.IsModified">Save</Button>
        </FormItem>
    </Form>
</div>

@code {
    User User = new User();
    Form<User> Form;

    bool LoadingAvatar = false;
    string AvatarUrl;

    string[] ValidMimeTypes = new string[]
    {
        "image/png",
        "image/jpeg"
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity.IsAuthenticated)
            User = await UserManager.FindByNameAsync(authState.User.Identity.Name);

        LoadAvatar();
    }

    private async Task Save()
    {
        try
        {
            if (Form.IsModified)
            {
                await UserManager.UpdateAsync(User);

                MessageService.Success("Profile updated!");

                NavigationManager.NavigateTo("/Identity/Account/Logout?force=true", true);
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("An unknown error occurred.");
            Logger.LogError(ex, "An unknown error occurred.");
        }
    }

    void LoadAvatar()
    {
        var avatar = User.Media.FirstOrDefault(a => a.Type == SDK.Enums.MediaType.Avatar);

        if (avatar != null)
            AvatarUrl = $"/api/Media/{avatar.Id}/Download?fileId={avatar.FileId}";
        else
            AvatarUrl = String.Empty;
    }

    async Task UploadAvatar(InputFileChangeEventArgs e)
    {
        var media = User.Media.FirstOrDefault(m => m.Type == SDK.Enums.MediaType.Avatar);

        if (media == null)
            media = new Media
            {
                Type = SDK.Enums.MediaType.Avatar,
                UserId = User.Id
            };

        if (!ValidMimeTypes.Contains(e.File.ContentType))
        {
            MessageService.Error("Unsupported file type");
            return;
        }

        if ((e.File.Size / 1024) > 512)
        {
            MessageService.Error($"File size must be smaller than 512KB");
            return;
        }

        media.SourceUrl = "";
        media.MimeType = e.File.ContentType;

        if (media.Id == Guid.Empty)
        {
            media = await MediaService.UploadMediaAsync(e.File, media);

            await MediaService.Add(media);
        }
        else
        {
            MediaService.DeleteLocalMediaFile(media.FileId);
            media = await MediaService.UploadMediaAsync(e.File, media);
            await MediaService.Update(media);
        }

        LoadAvatar();
    }
}
