@using LANCommander.Client.Models
@inject ImportService ImportService
@inject WindowService WindowService
@inject ProfileService ProfileService
@inject NavigationManager NavigationManager

<Space Direction="@DirectionVHType.Horizontal" Class="appbar">
    <SpaceItem Class="appbar-draggable-titlebar" >
        <div @onmousedown="() => WindowService.StartDragWindow()" @onmouseup="() => WindowService.StopDragWindow()">

        </div>
    </SpaceItem>

    <SpaceItem>
        <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Sync" OnClick="Import" />
    </SpaceItem>

    @if (Settings != null && Settings.Profile != null && ProfileService.IsAuthenticated())
    {
        <SpaceItem>
            <Dropdown>
                <Overlay>
                    <Menu>
                        <MenuItem OnClick="Logout">
                            Logout
                        </MenuItem>
                    </Menu>
                </Overlay>

                <ChildContent>
                    <Button Type="@ButtonType.Primary" Class="appbar-profile-button">
                        <img src="data:image/png;base64,@(Settings.Profile.Avatar)" />
                        @Settings.Profile.Alias
                    </Button>
                </ChildContent>
            </Dropdown>

        </SpaceItem>
    }

    <SpaceItem>
        <Button Type="@ButtonType.Text" Icon="@IconType.Outline.VerticalAlignBottom" OnClick="MinimizeApp" />
    </SpaceItem>
    <SpaceItem>
        @if (WindowService.IsMaximized)
        {
            <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Border" OnClick="ToggleMaximize" />
        }
        else
        {
            <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Border" OnClick="ToggleMaximize" />
        }
    </SpaceItem>
    <SpaceItem>
        <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Close" OnClick="CloseApp" />
    </SpaceItem>
</Space>

@code {
    Settings Settings = null;

    protected override async Task OnInitializedAsync()
    {
        Settings = SettingService.GetSettings();
    }

    void DragWindow()
    {
        //WindowService.DragWindow();
    }

    void MinimizeApp()
    {
        WindowService.Minimize();
    }

    void ToggleMaximize()
    {
        WindowService.ToggleMaximize();

        StateHasChanged();
    }

    void CloseApp()
    {
        WindowService.Close();
    }

    async Task Logout()
    {
        await ProfileService.Logout();

        NavigationManager.NavigateTo("/Authenticate", true);
    }

    async void Import()
    {
        await ImportService.ImportAsync();
    }
}