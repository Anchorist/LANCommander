@using Microsoft.UI
@using Microsoft.UI.Windowing
<Space Direction="@DirectionVHType.Horizontal">
    <SpaceItem>
        <Button Type="@ButtonType.Text" Icon="@IconType.Outline.VerticalAlignBottom" OnClick="MinimizeApp" />
    </SpaceItem>
    <SpaceItem>
        @if (IsMaximized)
        {
            <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Border" OnClick="ToggleMaximize" />
        }
        else
        {
            <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Border" OnClick="ToggleMaximize" />
        }
    </SpaceItem>
    <SpaceItem>
        <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Close" OnClick="CloseApp" />
    </SpaceItem>
</Space>

@code {
    bool IsMaximized { get
        {
            var window = App.Current.Windows.First();

            if (window.Handler != null)
            {
                var p = GetPresenter();

                return p.State == OverlappedPresenterState.Maximized;
            }
            else return false;
        }
    }
    void MinimizeApp()
    {
        var p = GetPresenter();

        p.Minimize();
    }

    void ToggleMaximize()
    {
        var p = GetPresenter();

        if (p.State != OverlappedPresenterState.Maximized)
            p.Maximize();
        else
            p.Restore();

        StateHasChanged();
    }

    void CloseApp()
    {
        Application.Current.Quit();
    }

    OverlappedPresenter GetPresenter()
    {
        var Window = App.Current.Windows.First();
        var nativeWindow = Window.Handler.PlatformView;
        IntPtr windowHandle = WinRT.Interop.WindowNative.GetWindowHandle(nativeWindow);
        WindowId WindowId = Win32Interop.GetWindowIdFromWindow(windowHandle);
        AppWindow appWindow = AppWindow.GetFromWindowId(WindowId);

        return appWindow.Presenter as OverlappedPresenter;
    }
}