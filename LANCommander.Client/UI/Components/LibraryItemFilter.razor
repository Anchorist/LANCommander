@implements IDisposable
@using LANCommander.Client.Data.Models
@using LANCommander.Client.Enums
@using LANCommander.Client.Models
@using System.Collections.ObjectModel
@inject LibraryService LibraryService
@inject EngineService EngineService
@inject GenreService GenreService
@inject TagService TagService
@inject MessageBusService MessageBusService

<Popover @ref="@Popover" Trigger="@(new AntDesign.Trigger[] { AntDesign.Trigger.Click})" OverlayClassName="library-filter" Placement="@Placement.TopLeft">
    <ChildContent>
        <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Filter" Style="position: absolute; left: 8px;" />
    </ChildContent>
    <ContentTemplate>
        <Form @ref="Form" Model="Filter" OnFinish="ApplyFilter" Layout="@FormLayout.Vertical" Size="small">
            <FormItem Label="Title">
                <Input @bind-Value="@context.Title" />
            </FormItem>
            <FormItem Label="Group By">
                <Select @bind-Value="@context.GroupBy" TItem="GroupBy" TItemValue="GroupBy" DataSource="Enum.GetValues<GroupBy>()">
                    <LabelTemplate Context="Value">@Value.GetDisplayName()</LabelTemplate>
                    <ItemTemplate Context="Value">@Value.GetDisplayName()</ItemTemplate>
                </Select>
            </FormItem>
            <FormItem Label="Engine">
                <TagsInput Entities="Engines" @bind-Values="@context.Engines" OptionLabelSelector="e => e.Name" TItem="Engine" />
            </FormItem>
            <FormItem Label="Genre">
                <TagsInput Entities="Genres" @bind-Values="@context.Genres" OptionLabelSelector="g => g.Name" TItem="Genre" />
            </FormItem>
            <FormItem Label="Tag">
                <TagsInput Entities="Tags" @bind-Values="@context.Tags" OptionLabelSelector="t => t.Name" TItem="Data.Models.Tag" />
            </FormItem>
            <FormItem Label="Developers">
                <TagsInput Entities="Developers" @bind-Values="@context.Developers" OptionLabelSelector="c => c.Name" TItem="Company" />
            </FormItem>
            <FormItem Label="Publishers">
                <TagsInput Entities="Publishers" @bind-Values="@context.Publishers" OptionLabelSelector="c => c.Name" TItem="Company" />
            </FormItem>
            <FormItem Label="Players">
                <InputGroup Compact>
                    <AntDesign.InputNumber @bind-Value="@context.MinPlayers" Min="@MinPlayers" Max="@MaxPlayers" PlaceHolder="Minimum" Style="flex-grow: 1;" />
                    <Input TValue="string" InputElementSuffixClass="site-input-split" Style="width: 30px; border-left: 0; border-right: 0; pointer-events: none; text-align: center;" Placeholder="~" Disabled />
                    <AntDesign.InputNumber @bind-Value="@context.MaxPlayers" Min="@MinPlayers" Max="@MaxPlayers" PlaceHolder="Maximum" Style="flex-grow: 1;" />
                </InputGroup>
            </FormItem>
            <FormItem>
                <Checkbox @bind-Value="@context.Installed">Installed</Checkbox>
            </FormItem>
            <FormItem>
                <Button Type="@ButtonType.Primary" HtmlType="submit">Apply</Button>
                <Button Type="@ButtonType.Text" OnClick="ResetFilter" Icon="@IconType.Outline.Close" Danger />
            </FormItem>
        </Form>
    </ContentTemplate>
</Popover>

@code {
    public class FilterModel
    {
        public string Title { get; set; }
        public GroupBy GroupBy { get; set; }
        public ICollection<Engine> Engines { get; set; }
        public ICollection<Genre> Genres { get; set; }
        public ICollection<Data.Models.Tag> Tags { get; set; }
        public ICollection<Company> Developers { get; set; }
        public ICollection<Company> Publishers { get; set; }
        public int? MinPlayers { get; set; }
        public int? MaxPlayers { get; set; }
        public bool Installed { get; set; }
    }

    FilterModel Filter = new FilterModel();
    Form<FilterModel> Form;

    IEnumerable<Engine> Engines { get; set; }
    IEnumerable<Genre> Genres { get; set; }
    IEnumerable<Data.Models.Tag> Tags { get; set; }
    IEnumerable<Company> Developers { get; set; }
    IEnumerable<Company> Publishers { get; set; }

    int MinPlayers { get; set; }
    int MaxPlayers { get; set; }

    Popover Popover;

    protected override async Task OnInitializedAsync()
    {
        LibraryService.OnLibraryItemsFiltered += PopulateFilter;

        Load();
        MessageBusService.LibraryFilterApplied();
    }

    async Task PopulateFilter(IEnumerable<LibraryItem> items)
    {
        var games = items.Where(i => i != null && i.DataItem != null && i.DataItem is Game).Select(i => i.DataItem as Game);
        var multiplayerModes = games.Where(g => g.MultiplayerModes != null).SelectMany(g => g.MultiplayerModes);

        Engines = games
            .Select(i => i.Engine)
            .Where(e => e != null)
            .DistinctBy(e => e.Id)
            .OrderBy(e => e.Name);

        Genres = games
            .SelectMany(i => i.Genres)
            .Where(g => g != null)
            .DistinctBy(g => g.Id)
            .OrderBy(g => g.Name);

        Tags = games
            .SelectMany(i => i.Tags)
            .Where(t => t != null)
            .DistinctBy(t => t.Id)
            .OrderBy(t => t.Name);

        Developers = games
            .SelectMany(i => i.Developers)
            .Where(c => c != null)
            .DistinctBy(c => c.Id)
            .OrderBy(c => c.Name);

        Publishers = games
            .SelectMany(i => i.Publishers)
            .Where(c => c != null)
            .DistinctBy(c => c.Id)
            .OrderBy(c => c.Name);

        if (games.Any(li => li.Singleplayer))
            MinPlayers = 1;
        else if (multiplayerModes.Any())
            MinPlayers = multiplayerModes.Where(i => i != null).Min(i => i.MinPlayers);

        if (multiplayerModes.Any())
            MaxPlayers = multiplayerModes.Max(i => i.MaxPlayers);

        await InvokeAsync(StateHasChanged);
    }

    void Save()
    {
        var settings = SettingService.GetSettings();

        settings.Filter = new FilterSettings()
        {
            Title = Filter.Title,
            GroupBy = Filter.GroupBy,
            Engines = Filter.Engines?.Select(e => e.Name),
            Genres = Filter.Genres?.Select(g => g.Name),
            Tags = Filter.Tags?.Select(t => t.Name),
            Developers = Filter.Developers?.Select(c => c.Name),
            Publishers = Filter.Publishers?.Select(c => c.Name),
            MinPlayers = Filter.MinPlayers,
            MaxPlayers = Filter.MaxPlayers,
            Installed = Filter.Installed
        };

        SettingService.SaveSettings(settings);
    }

    void Load()
    {
        var settings = SettingService.GetSettings();

        var engines = settings.Filter.Engines != null ? Engines?.Where(e => settings.Filter.Engines.Contains(e.Name)).ToList() : null;
        var genres = settings.Filter.Genres != null ? Genres?.Where(e => settings.Filter.Genres.Contains(e.Name)).ToList() : null;
        var tags = settings.Filter.Tags != null ? Tags?.Where(e => settings.Filter.Tags.Contains(e.Name)).ToList() : null;
        var publishers = settings.Filter.Publishers != null ? Publishers?.Where(e => settings.Filter.Publishers.Contains(e.Name)).ToList() : null;
        var developers = settings.Filter.Developers != null ? Developers?.Where(e => settings.Filter.Developers.Contains(e.Name)).ToList() : null;

        Filter = new FilterModel()
        {
            Title = settings.Filter.Title,
            GroupBy = settings.Filter.GroupBy,
            Engines = engines,
            Genres = genres,
            Tags = tags,
            Developers = developers,
            Publishers = publishers,
            MinPlayers = settings.Filter.MinPlayers,
            MaxPlayers = settings.Filter.MaxPlayers,
            Installed = settings.Filter.Installed
        };
    }

    async Task ResetFilter()
    {
        Filter = new FilterModel();
        Save();
        MessageBusService.LibraryFilterApplied();
    }

    async Task ApplyFilter()
    {
        Save();
        MessageBusService.LibraryFilterApplied();
        await Popover.Close();
    }

    public void Dispose()
    {
        LibraryService.OnLibraryItemsFiltered -= PopulateFilter;
    }
}
