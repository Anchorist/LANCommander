@using LANCommander.Client.Extensions

<Tree TItem="string" OnClick="OnClick">
    @foreach (var collectionName in Collections.Keys)
    {
        <TreeNode Title="@collectionName" TItem="string">
            @foreach (var game in Collections[collectionName])
            {
                <TreeNode Title="@game.Title" Key="@game.Id.ToString()" TItem="string" />
            }
        </TreeNode>
    }
</Tree>

@code {
    [Parameter] public ICollection<SDK.Models.Game> Games { get; set; } = new List<SDK.Models.Game>();
    [Parameter] public EventCallback<ICollection<SDK.Models.Game>> GamesChanged { get; set; }

    [Parameter] public EventCallback<SDK.Models.Game> OnGameSelected { get; set; }

    Dictionary<string, ICollection<SDK.Models.Game>> Collections = new Dictionary<string, ICollection<SDK.Models.Game>>();

    protected override async Task OnInitializedAsync()
    {
        var collections = Games.SelectMany(g => g.Collections).DistinctBy(c => c.Id);

        foreach (var collection in collections)
        {
            Collections[collection.Name] = Games.Where(g => g.Collections != null && g.Collections.Any(c => c.Id == collection.Id)).OrderByTitle(g => String.IsNullOrWhiteSpace(g.SortTitle) ? g.Title : g.SortTitle).ToList();
        }

        Collections["Uncategorized"] = Games.Where(g => g.Collections == null || g.Collections.Count() == 0).ToList();
    }

    async Task OnClick(TreeEventArgs<string> eventArgs)
    {
        SDK.Models.Game game = null;

        foreach (var collection in Collections)
        {
            game = collection.Value.FirstOrDefault(g => g.Id.ToString() == eventArgs.Node.Key);

            if (game != null)
                break;
        }

        if (OnGameSelected.HasDelegate)
            await OnGameSelected.InvokeAsync(game);
    }
}