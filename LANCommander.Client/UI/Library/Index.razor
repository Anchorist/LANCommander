@page "/"
@using LANCommander.Client.Models
@using System.Diagnostics
@inject SDK.Client Client
@inject NavigationManager NavigationManager
@inject LibraryService LibraryService
@inject DownloadService DownloadService
@inject GameService GameService
@inject ModalService ModalService
@inject ImportService ImportService

<Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Download" OnClick="() => Import()">Import</Button>

<SplitPane Class="library">
    <Pane Size="25%" Class="library-list">
        <Collapse>
            @foreach (var collection in LibraryItems.Where(i => i != null && i.DataItem is Data.Models.Collection))
            {
                <Panel Header="@collection.Name" Key="@collection.Key.ToString()">
                    <AntList DataSource="@collection.Children" TItem="LibraryItem" Size="small">
                        <ListItem OnClick="() => OnLibraryItemSelected(context)">
                            @context.Name
                        </ListItem>
                    </AntList>
                </Panel>
            }
        </Collapse>
    </Pane>

    <Pane Class="game-details">
        @if (SelectedGame != null)
        {
            <div class="game-hero">
                <h1>@SelectedGame.Name</h1>
            </div>
            <div class="game-infobar">
                @if (SelectedGame.State == LibraryItemState.NotInstalled)
                {
                    <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Download" OnClick="() => Install(SelectedGame)">Install</Button>
                }
                else if (SelectedGame.State == LibraryItemState.Installed)
                {
                    <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.CaretRight" OnClick="() => Run(SelectedGame)">Play</Button>

                    <DropdownButton Icon="@IconType.Outline.Ellipsis">
                        <Overlay>
                            <Menu>
                                @if (SelectedGameActions.Count() > 0)
                                {
                                    @foreach (var action in SelectedGameActions)
                                    {
                                        <MenuItem OnClick="() => LibraryService.Run(SelectedGame, action)">
                                            @action.Name
                                        </MenuItem>
                                    }

                                    <MenuDivider />
                                }
                            </Menu>
                        </Overlay>
                        <ChildContent>
                            More
                        </ChildContent>
                    </DropdownButton>
                }
                else if (SelectedGame.State == LibraryItemState.Queued)
                {
                    <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Bars" Disabled="true">Queued</Button>
                }
                else if (SelectedGame.State == LibraryItemState.UpdateAvailable)
                {
                    <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Download">Update</Button>
                }
                else if (SelectedGame.State == LibraryItemState.Installing)
                {
                    <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Loading">Installing</Button>
                }
            </div>
        }
    </Pane>
</SplitPane>

<DownloadQueue />
<LANCommander.Client.UI.Components.Footer />

@code {
    LibraryItem SelectedGame { get; set; }

    IEnumerable<SDK.Models.Action> SelectedGameActions { get; set; }
    IEnumerable<LibraryItem> LibraryItems { get; set; } = new List<LibraryItem>();

    protected override async Task OnInitializedAsync()
    {
        LibraryItems = await LibraryService.GetLibraryItemsAsync();
    }

    async Task OnLibraryItemSelected(LibraryItem item)
    {
        if (item.DataItem is Data.Models.Game)
        {
            SelectedGame = item;
            SelectedGameActions = (await GameService.GetActionsAsync(SelectedGame.DataItem as Data.Models.Game)).Where(a => !a.IsPrimaryAction);
        }
    }

    async void Import()
    {
        await ImportService.ImportAsync();
    }

    async Task Install(LibraryItem item)
    {
        await DownloadService.Add(item.DataItem as Data.Models.Game);
    }

    async Task Uninstall(LibraryItem item)
    {
        await LibraryService.Uninstall(item);
    }

    async Task Run(LibraryItem item)
    {
        var game = item.DataItem as Data.Models.Game;
        var actions = await GameService.GetActionsAsync(game);

        var modalOptions = new ModalOptions()
        {
            Title = item.Name,
            Maximizable = false,
            DefaultMaximized = false,
            Closable = true,
        };

        var model = new ActionSelectorDialogOptions
        {
            Actions = actions.Where(a => a.IsPrimaryAction),
            LibraryItem = item
        };

        var modalRef = ModalService.CreateModal<ActionSelectorDialog, ActionSelectorDialogOptions, Process>(modalOptions, model);
    }
}
